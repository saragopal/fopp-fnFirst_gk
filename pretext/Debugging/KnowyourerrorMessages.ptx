<?xml version="1.0"?>
<section xml:id="debugging_know-your-error-messages">
  <title>Know Your Error Messages</title>
  <p>Many problems in your program will lead to an error message. For example as I was
    writing and testing this chapter of the book I wrote the following version of the
    example program in the previous section.</p>
  <program language="python">
    <input>
      current_time_str = input("What is the current time (in hours 0-23)?")
      wait_time_str = input("How many hours do you want to wait")

      current_time_int = int(current_time_str)
      wait_time_int = int(wait_time_int)

      final_time_int = current_time_int + wait_time_int
      print(final_time_int)
    </input>
  </program>
  <p>Can you see what is wrong, just by looking at the code? Maybe, maybe not. Our brain
    tends to see what we think is there, so sometimes it is very hard to find the problem
    just by looking at the code. Especially when it is our own code and we are sure that
    we have done everything right!</p>
  <p>Let's try the program again, but this time in an activecode:</p>
  <program xml:id="ac3_6_1" interactive="activecode" language="python">
    <input>
      current_time_str = input("What is the current time (in hours 0-23)?")
      wait_time_str = input("How many hours do you want to wait")

      current_time_int = int(current_time_str)
      wait_time_int = int(wait_time_int)

      final_time_int = current_time_int + wait_time_int
      print(final_time_int)
    </input>
  </program>
  <p>Aha! Now we have an error message that might be useful. The name error tells us that <c>wait_time_int</c> is not defined. It also tells us that the error is on line 5. That's <alert>really</alert> useful information. Now look at line five and you will see that <c>wait_time_int</c>
    is used on both the left and the right hand side of the assignment statement.</p>
  <note>
    <p>The error descriptions you see in activecode may be different (and more understandable!) than
      in a regular
      Python interpreter. The interpreter in activecode is limited in many ways, but it is intended
      for beginners,
      including the wording chosen to describe errors.</p>
  </note>
  <exercise label="question3_6_1">
    <statement>
      <p>Which of the following explains why <c>wait_time_int = int(wait_time_int)</c> is an error?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>You cannot use a variable on both the left and right hand sides of an assignment
            statement.</p>
        </statement>
        <feedback>
          <p>No, You can, as long as all the variables on the right hand side already have values.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>wait_time_int does not have a value so it cannot be used on the right hand side.</p>
        </statement>
        <feedback>
          <p>Yes. Variables must already have values in order to be used on the right hand side.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>This is not really an error, Python is broken.</p>
        </statement>
        <feedback>
          <p>No, No, No!</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <p>In writing and using this book over the last few years we have collected a lot of
    statistics about the programs in this book. Here are some statistics about error
    messages for the exercises in this book.</p>
  <image source="Debugging/Figures/error_dist.png" width="100%" />
  <p>Nearly 90% of the error messages encountered are SyntaxError,
    TypeError, NameError, ValueError, or AttributeError. We will look at these errors in three
    stages:</p>
  <p>
    <ul>
      <li>
        <p>First we will define what these four error messages mean.</p>
      </li>
      <li>
        <p>Then, we will look at some examples that cause these errors to occur.</p>
      </li>
      <li>
        <p>Finally we will look at ways to help uncover the root cause of these messages.</p>
      </li>
    </ul>
  </p>
  
  <subsection xml:id="debugging_syntaxerror">
    <title>SyntaxError</title>
    <p>Syntax errors happen when you make an error in the syntax of your program. Syntax
      errors are like making grammatical errors in writing. If you don't use periods and
      commas in your writing then you are making it hard for other readers to figure out
      what you are trying to say. Similarly Python has certain grammatical rules that must
      be followed or else Python can't figure out what you are trying to say.</p>
    <p>Usually SyntaxErrors can be traced back to missing punctuation characters, such as
      parentheses, quotation marks, or commas.</p>
    <p>Here are a couple examples of Syntax errors in the example program we have been using.
      See if you can figure out what caused them:</p>

    <exercise>
      <program interactive="activecode" language="python">
      <input>
        current_time_str = input("What is the current time (in hours 0-23)?")
        wait_time_str = input("How many hours do you want to wait"

        current_time_int = int(current_time_str)
        wait_time_int = int(wait_time_int)

        final_time_int = current_time_int + wait_time_int
        print(final_time_int)
      </input>
    </program>

        <solution>
      <p>
        This is tricky; the error message points us to line 4, but there is no syntax error on that line. The next step should be to back up and look at the previous line. If you look at
        line 2 carefully you will see that there is a missing right parenthesis at the end of the
        line. Remember that parentheses must be balanced. Since Python allows statements to continue
        over multiple lines inside parentheses, python will continue to scan subsequent lines looking
        for the balancing right parenthesis. However in this case it finds the name <c>current_time_int</c> instead. So the missing parenthesis on line 2 has caused the interpreter to see a syntax error on line 4.
      </p>
    </solution>
    </exercise>
    <!-- <p><term>Finding Clues</term> How can you help yourself find these problems? One trick that can
      be very valuable in this situation is to simply start by commenting out the line number that
      is flagged as having the error. If you comment out line four, the error message now changes to
      point to line 5. Now you ask yourself, am I really that bad that I have two lines in a row
      that have errors on them? Maybe, so taken to the extreme, you could comment out all of the
      remaining lines in the program. Now the error message changes to <c>TokenError: EOF in
      multi-line statement</c> This is a very technical way of saying that Python got to the end of
      file (EOF) while it was still looking for something. In this case a right parenthesis.</p> -->

    <exercise>
      <program interactive="activecode" language="python">
        <input>
          current_time_str = input("What is the "current time" (in hours 0-23)?")
          wait_time_str = input("How many hours do you want to wait")

          current_time_int = int(current_time_str)
          wait_time_int = int(wait_time_int)

          final_time_int = current_time_int + wait_time_int
          print(final_time_int)
        </input>
      </program>
      <solution> The string on line 1 is enclosed in double quotes, but also <em>contains</em> double quotes.
        As the interpreter reads line 1 from left to right, it finds the first double quote indicating the start of a string. It next finds the double quote before <q>current time</q> and thinks this quote ends the string. It then can't make sense of the rest of line 1. In this case your biggest clue is to notice the difference in highlighting on the line. 
        A solution would be to enclose the string in double quotes but 'current time' in single quotes (or vice versa).
        If you were having trouble finding this error, you could comment out 
      </solution>
    </exercise>

    <!-- <p><term>Finding Clues</term> If you follow the same advice as for the last problem, comment out
      line one, you will immediately get a different error message. Here's where you need to be very
      careful and not panic. The error message you get now is: <c>NameError: name
        'current_time_str' is not defined on line 4</c>. You might be very tempted to think that
      this is somehow related to the earlier problem and immediately conclude that there is
      something wrong with the variable name <c>current_time_str</c> but if you reflect for a minute
      you will see that by commenting out line one you have caused a new and unrelated error. That
      is you have commented out the creation of the name <c>current_time_str</c>. So of course when
      you want to convert it to an <c>int</c> you will get the NameError. Yes, this can be
      confusing, but it will become much easier with experience. It's also important to keep calm,
      and evaluate each new clue carefully so you don't waste time chasing problems that are not
      really there.</p>
    <p>Uncomment line 1 and you are back to the SyntaxError. Another track is to eliminate a
      possible source of error. Rather than commenting out the entire line you might just try to
      assign <c>current_time_str</c> to a constant value. For example you might make line one look
      like this: <c>current_time_str = "10" #input("What is the "current
        time" (in hours 0-23)?")</c>. Now you have assigned <c>current_time_str</c> to the string
      10, and commented out the input statement. And now the program works! So you conclude that the
      problem must have something to do with the input function.</p> -->
  </subsection>
  <subsection xml:id="debugging_typeerror">
    <title>TypeError</title>
    <p>TypeErrors occur when you you try to use an object in a way that is inappropriate for its data type. For
      example, trying to add together an integer and a string. Usually the line number
      given by a TypeError error message is an accurate indication of where the problem is.</p>
    <p>Here's an example of a type error created by a Polish learner. See if you can find
      and fix the error.</p>
    <p>
      <em>Hint: if you're stuck, it may help to step through this program using Codelens and paying careful attention to the values for <c>x</c> and <c>a</c></em>
    </p>

    <exercise>
      <program xml:id="ac3_6_4" interactive="activecode" language="python">
      <input>
        a = input('wpisz godzine')
        x = input('wpisz liczbe godzin')
        int(x)
        int(a)
        h = x // 24
        s = x % 24
        print (h, s)
        a = a + s
        print ('godzina teraz', a)
      </input>
      </program>
      <solution>
        <p>
          The error message says that line 5 is trying to do a floor division (<c>//</c>) on a string and number. 24 is definitely a number, so <c>x</c> must be a string. But how? What is the difference between <c>int(x)</c> and <c>x = int(x)</c>?
        </p>
      </solution>
    </exercise>
  </subsection>

  <subsection xml:id="debugging_nameerror">
    <title>NameError</title>
    <p>Name errors often occur when you use a variable before it has a value.
      Sometimes they are simply caused by typos in your code - for example, you mean to refer to the variable <c>day_of_week</c> but accidentally type <c>day_of_wee</c>. Here is an example of a NameError. See if you can get this program to run successfully:</p>
    
    <exercise>
      <program xml:id="ac3_6_5" interactive="activecode" language="python">
        <input>
          str_time = input("What time is it now? (hour from 0-24)")
          str_wait_time = input("What is the number of hours to wait?")
          time = int(str_time)
          wai_time = int(str_wait_time)

          time_when_alarm_go_off = time + wait_time
          print(time_when_alarm_go_off)
        </input>
      </program>
      <solution>
        <p>
          The error says the variable <c>wait_time</c> is undefined. Look at line 4 where the variable is declared, and you will see it has been misspelled.
        </p>
      </solution>
    </exercise>

    
    <p>Here is another one for you to try:</p>
    <exercise>
      <program xml:id="ac3_6_6" interactive="activecode" language="python">
        <input>
          n = input("What time is it now (hours from 0-24)?")
          n = imt(n)
          m = input("How many hours do you want to wait?")
          m = int(m)
          sum_time = n + m
          time_of_day = sum_time % 12
          print("The time is now", time_of_day)
        </input>
      </program>
      <solution>
        <p>
          This is another typo, but the typo is not in a variable name, but rather the
        name of the <c>int</c> function on line 2.
        </p>
      </solution>
    </exercise>

    <!-- <p>And one last bit of code to fix.</p>
    <program xml:id="ac3_6_7" interactive="activecode" language="python">
      <input>
        present_time = input("Enter the present time (hours from 0-24):")
        set_alarm = input("Set the hours for alarm:")
        int (present_time, set_time, alarm_time)
        alarm_time = present_time + set_alarm
        print(alarm_time)
      </input>
    </program>
    <hint>
      <note>
        <title>Solution</title>
        <p>In this example the error message is about <c>set_time</c> not defined on line 3. In this
          case the undefined name is not used in an assignment statement, but is used as a parameter
          (incorrectly) to a function call. A search on <c>set_time</c> reveals that in fact it is
          only used once in the program. Did the author mean <c>set_alarm</c>? If we make that
          assumption we immediately get another error <c>NameError: name 'alarm_time' is not defined
          on line: 3</c>. The variable <c>alarm_time</c> is defined on line 4, but that does not
          help us on line 3. Furthermore we now have to ask the question is this function call <c>int(present_time,
          set_alarm, alarm_time)</c> even the correct use of the <c>int</c> function? The answer to
          that is a resounding no. Let's list all of the things wrong with line 3:</p>
        <p>
          <ol marker="1">
            <li>
              <p><c>set_time</c> is not defined and never used, the author probably meant <c>
                set_alarm</c>.</p>
            </li>
            <li>
              <p><c>alarm_time</c> cannot be used as a parameter before it is defined, even on the
                next line!</p>
            </li>
            <li>
              <p><c>int</c> can only convert one string to an integer at a time.</p>
            </li>
            <li>
              <p>Finally, <c>int</c> should be used in an assignment statement. Even if <c>int</c>
                was called with the correct number of parameters it would have no real effect.</p>
            </li>
          </ol>
        </p>
      </note>
    </hint> -->

    <!--advanced
    topic!-->
    <!--present_time
    = int(input("Enter the present time(hhmm):"))-->
    <!--print
    type(present_time)-->
    <!--min
    = _ * 60-->
    <!--tot_min
    = min + [2, 4]-->
    <!--print(tot_min)-->
    <!--set_hrs
    = int(input("Enter the hours (hhmm):"))-->
    <!--alarm_time
    = present_time + set_hrs-->
    <!--print(alarm_time)-->
  </subsection>

  <subsection xml:id="debugging_valueerror">
    <title>ValueError</title>
    <p>Value errors occur when a value does not meet a set of expectations or requirements. For example, the <c>int()</c> function can convert a string to an integers, but only if the string actually contains an integer. Attempting <c>int("hello world")</c> will cause a ValueError.</p>

    <p> Try running the following program, but when prompted to enter a numeric time, instead enter the word "ten". This will create a value error on line 2, when the program attempts to convert your input to an integer: the value of <c>current_time_str</c> does not meet the requirements of the <c>int()</c> function.</p>
    <program xml:id="ac3_6_8" interactive="activecode" language="python">
      <input>
        current_time_str = input("What is the current time (in hours 0-23)?")
        current_time_int = int(current_time_str)

        wait_time_str = input("How many hours do you want to wait")
        wait_time_int = int(wait_time_str)

        final_time_int = current_time_int + wait_time_int
        print(final_time_int)
      </input>
    </program>

    <p>To help avoid Value Errors, make good use of comments in your code, and name your variables in a way that indicates the kind of values they should take.</p>
  </subsection>
</section>