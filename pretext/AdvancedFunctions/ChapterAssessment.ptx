<?xml version="1.0"?>
<section xml:id="advanced-functions_chapter-assessment">
  <title>Chapter Assessment</title>
  <exercise label="ac15_5_1">
    <statement>
      <p>Create a function called <c>mult</c> that has two parameters, the first is required and should be an integer, the second is an optional parameter that can either be a number or a string but whose default is 6. The function should return the first parameter multiplied by the second.</p>
    </statement>
    <program xml:id="ac15_5_1_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(mult(2), 12, "Testing that mult returns the correct value on input (2)")
      self.assertEqual(mult(5,3), 15, "Testing that mult returns the correct value on input (3,5)")
      self.assertEqual(mult(4,"hello"), "hellohellohellohello", "testing that mult returns the correct value on input (4, 'hello'")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="ac15_5_2">
    <statement>
      <p>The following function, <c>greeting</c>, does not work. Please fix the code so that it runs without error. This only requires one change in the definition of the function.</p>
    </statement>
    <program xml:id="ac15_5_2_editor" interactive="activecode" language="python">
      <input>

def greeting(greeting="Hello ", name, excl="!"):
    return greeting + name + excl

print(greeting("Bob"))
print(greeting(""))
print(greeting("Bob", excl="!!!"))
=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(greeting("Bob"), "Hello Bob!", "Testing that greeting('Bob') returns 'Hello Bob!'.")
      self.assertEqual(greeting(""), "Hello !", "Testing that greeting('') return 'Hello !'.")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="ac15_5_3">
    <statement>
      <p>Below is a function, <c>sum</c>, that does not work. Change the function definition so the code works. The function should still have a required parameter, <c>intx</c>, and an optional parameter, <c>intz</c> with a defualt value of 5.</p>
    </statement>
    <program xml:id="ac15_5_3_editor" interactive="activecode" language="python">
      <input>

def sum(intz=5, intx):
    return intz + intx

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(sum(8, intz = 2), 10, "Testing the function sum on inputs 8, 2.")
      self.assertEqual(sum(12), 17, "Testing the function sum on input 12.")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="ac15_5_4">
    <statement>
      <p>Write a function, <c>test</c>, that takes in three parameters: a required integer, an optional boolean whose default value is <c>True</c>, and an optional dictionary, called <c>dict1</c>, whose default value is <c>{2:3, 4:5, 6:8}</c>. If the boolean parameter is True, the function should test to see if the integer is a key in the dictionary. The value of that key should then be returned. If the boolean parameter is False, return the boolean value <q>False</q>.</p>
    </statement>
    <program xml:id="ac15_5_4_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testThree(self):
      self.assertEqual(test(2), 3, "Testing that test(2) returns 3")
      self.assertEqual(test(4, False), False, "Testing that test(4, False) returns False")
      self.assertEqual(test(5, dict1 = {5:4, 2:1}), 4, "Testing that test(5, dict1 = {5:4, 2:1}) returns 4")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="ac15_5_5">
    <statement>
      <p>Write a function called <c>checkingIfIn</c> that takes three parameters. The first is a required parameter, which should be a string. The second is an optional parameter called <c>direction</c> with a default value of <c>True</c>. The third is an optional parameter called <c>d</c> that has a default value of <c>{'apple': 2, 'pear': 1, 'fruit': 19, 'orange': 5, 'banana': 3, 'grapes': 2, 'watermelon': 7}</c>. Write the function <c>checkingIfIn</c> so that when the second parameter is <c>True</c>, it checks to see if the first parameter is a key in the third parameter; if it is, return <c>True</c>, otherwise return <c>False</c>.</p>
      <p>But if the second paramter is <c>False</c>, then the function should check to see if the first parameter is <em>not</em> a key of the third. If it's <em>not</em>, the function should return <c>True</c> in this case, and if it is, it should return <c>False</c>.</p>
    </statement>
    <program xml:id="ac15_5_5_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(checkingIfIn('grapes'), True, "Testing that checkingIfIn returns the correct boolean on input 'grapes'")
      self.assertEqual(checkingIfIn('carrots'), False, "Testing that checkingIfIn returns the correct boolean on input 'carrots'")
      self.assertEqual(checkingIfIn('grapes', False), False, "Testing that checkingIfIn returns the correct boolean on input ('grapes', False)")
      self.assertEqual(checkingIfIn('carrots', False), True, "Testing that checkingIfIn returns the correct boolean on input ('carrots', False)")
      self.assertEqual(checkingIfIn('grapes', d = {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1}), False, "Testing that checkingIfIn returns the correct boolean on input ('grapes', d = {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1})")
      self.assertEqual(checkingIfIn('peas', d = {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1}), True, "Testing that checkingIfIn returns the correct boolean on input ('peas', d = {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1})")
      self.assertEqual(checkingIfIn('peas', False, {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1}), False, "Testing that checkingIfIn returns the correct boolean on input ('peas', False, {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1})")
      self.assertEqual(checkingIfIn('apples', False, {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1}), True, "Testing that checkingIfIn returns the correct boolean on input ('apples', False, {'carrots': 1, 'peas': 9, 'potatos': 8, 'corn': 32, 'beans': 1})")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="ac15_5_6">
    <statement>
      <p>We have provided the function <c>checkingIfIn</c> such that if the first input parameter is in the third, dictionary, input parameter, then the function returns that value, and otherwise, it returns <c>False</c>. Follow the instructions in the active code window for specific variable assignmemts.</p>
    </statement>
    <program xml:id="ac15_5_6_editor" interactive="activecode" language="python">
      <input>

def checkingIfIn(a, direction = True, d = {'apple': 2, 'pear': 1, 'fruit': 19, 'orange': 5, 'banana': 3, 'grapes': 2, 'watermelon': 7}):
    if direction == True:
        if a in d:
            return d[a]
        else:
            return False
    else:
        if a not in d:
            return True
        else:
            return d[a]

# Call the function so that it returns False and assign that function call to the variable c_false

# Call the fucntion so that it returns True and assign it to the variable c_true

# Call the function so that the value of fruit is assigned to the variable fruit_ans

# Call the function using the first and third parameter so that the value 8 is assigned to the variable param_check

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(c_false, False, "Testing that c_false has the correct value")
   def testTwo(self):
      self.assertEqual(c_true, True, "Testing that c_true has the correct value")
   def testThree(self):
      self.assertEqual(fruit_ans, 19, "Testing that fruit_ans has the correct value")
   def testFour(self):
      self.assertEqual(param_check, 8, "Testing that param_check has the correct value")


myTests().main()
        </input>
    </program>
  </exercise>
</section>
