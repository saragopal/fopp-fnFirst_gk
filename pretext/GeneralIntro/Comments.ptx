<?xml version="1.0"?>
<section xml:id="general-intro_comments">
  <title>Comments</title>
  <p>As programs get bigger and more complicated, they get more difficult to read.
            Formal languages are dense, and it is often difficult to look at a piece of
            code and figure out what it is doing, or why.
            For this reason, it is a good idea to add notes to your programs to explain in
            natural language what the program is doing.  These notes are called comments.</p>
  <p>A <term>comment</term> in a computer program is text that is intended only for the human
            reader - it is completely ignored by the interpreter.
            In Python, the <c>#</c> token starts a comment.  The rest of the line is ignored.
            Here is a new version of <em>Hello, World!</em>.</p>
  <program xml:id="ac1_10_1" interactive="activecode" language="python">
    <input>
#---------------------------------------------------
# This demo program shows off how elegant Python is!
# Written by Joe Soap, December 2010.
# Anyone may freely copy or modify this program.
#---------------------------------------------------

print("Hello, World!")     # Isn't this easy!
        </input>
  </program>
  <p>Notice that when you run this program, it still only prints the phrase Hello, World!  None of the comments appear.
            You'll also notice that we've left a blank line in the program.  Blank lines
            are also ignored by the interpreter, but comments and blank lines can make your
            programs much easier for humans to parse.  Use them liberally!</p>

  <p>Another way to use comments is to use them to plan your program - by including the natural language or pseudocode version of the algorithm
    an outline before you start coding. Consider how the code below uses comment to indicate the steps one might use to solve a word problem:</p>
     <program language="python">
    <input>
      #1 set all known values and constants

      #2 formulae (coded as functions)
      ## unit conversions

      ## governing equations
      
      #3 user input

      ## convert units

      #4 solving 


      #5 rounding for significant digits

      #6 solutions statement to display the answer 


    </input>
  </program>

  <p>There is one other way in Python that code is sometimes documented, by enclosing portions of the text within triple-quotes, <c>"""   """</c>. 
  This tells Python that the text should be treated as a <em>string</em> instead of as code to interpret. Strictly speaking, triple-quotes <em>are not comments</em> because the interpreter can still access their contents. In a later chapter we will discuss how this is useful when we document portions of our code (<alert>functions</alert>) with (<alert>docstrings</alert>).
  Some programmers take advantage
  of triple-quoted code not being executed as part of their debugging process: one can essentially 'turn off' portions of our code without having to delete it, and then turn it 'back on' 
  by removing the enclosing triple-quotes. </p>

  
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question1_10_1">
    <statement>
      <p>What are comments for?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>To tell the computer what you mean in your program.</p>
        </statement>
        <feedback>
          <p>Comments are ignored by the computer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>For the people who are reading your code to know, in natural language, what the program is doing.</p>
        </statement>
        <feedback>
          <p>The computer ignores comments.  It's for the humans that will <q>consume</q> your program.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing, they are extraneous information that is not needed.</p>
        </statement>
        <feedback>
          <p>Comments can provide much needed information for anyone reading the program.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Nothing in a short program.  They are only needed for really large programs.</p>
        </statement>
        <feedback>
          <p>Even small programs benefit from comments.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
