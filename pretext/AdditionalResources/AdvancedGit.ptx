<?xml version="1.0"?>
<section xml:id="additional_resources-advanced-git">
    <title>Advanced Git</title>
    <p>
        As you continue to use Git, whether it be individually or as part of a team, you will
        encounter more advanced concepts and workflows. This section will introduce some of these
        concepts.
    </p>
    <subsection xml:id="advanced-git_conflicts">
        <title>Conflicts</title>
        <p>
            Conflicts occur when two or more people make changes to the same file. Git will
            automatically merge changes when possible, but when it cannot, it will mark the file as
            having a conflict. When this happens, you will need to manually resolve the conflict.
        </p>
        <p>
            When a conflict occurs, Git will mark the file with conflict markers. These markers
            look like this:
        </p>
        <pre>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
This is the original text.
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 77976da35a11db4580b80ae27e8d65caf5208086
This is the modified text.</pre>
        <p> The text between the <c>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</c> and <c>=======</c>
            markers is the original text. The text between the <c>=======</c> and <c>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;77976da35a11db4580b80ae27e8d65caf5208086</c> markers is the modified text. You will need
            to manually edit the file to resolve the conflict. Once you have resolved the conflict,
            you will need to add the file to the staging area and commit it. </p>
    </subsection>
    <subsection xml:id="advanced-git_branching">
        <title>Branching</title>
        <p>
            Branching is a powerful feature of Git. Branches allow you to work on multiple
            features at the same time. Branches also allow you to work on features without
            affecting the main codebase.
        </p>
        <p>
            When you create a branch, you are creating a copy of the current state of the
            repository. You can then make changes to the branch without affecting the main
            codebase. When you are ready to merge your changes into the main codebase, you can
            merge the branch into the main codebase.
        </p>
        <p> To create a branch, use the <c>git branch</c> command. For example, to create a branch
            named <c>feature</c>, you would use the following command: </p>
        <pre>git branch feature</pre>
        <p> To switch to a branch, use the <c>git checkout</c> command. For example, to switch to
            the <c>feature</c> branch, you would use the following command: </p>
        <pre>git checkout feature</pre>
        <p> To create a branch and switch to it at the same time, use the <c>git checkout</c>
            command with the <c>-b</c> option. For example, to create a branch named <c>feature</c>
            and switch to it, you would use the following command: </p>
        <pre>git checkout -b feature</pre>
    </subsection>
    <subsection xml:id="advanced-git_merging">
        <title>Merging Branches</title>
        <p>
            Merging is the process of combining two or more branches into one. When you merge
            branches, Git will automatically merge changes when possible. When it cannot, it will
            mark the file as having a conflict. When this happens, you will need to manually
            resolve the conflict.
        </p>
        <p> To merge a branch into the current branch, use the <c>git merge</c> command. For
            example, to merge the <c>feature</c> branch into the current branch, you would use the
            following command: </p>
        <pre>git merge feature</pre>
        <p>
            When you merge a branch into the current branch, Git will automatically merge changes
            when possible. When it cannot, it will mark the file as having a conflict. When this
            happens, you will need to manually resolve the conflict.
        </p>
    </subsection>
    <subsection xml:id="advanced-git_rebasing">
        <title>Rebasing</title>
        <p>
            Rebasing is the process of moving a branch to a new base commit. When you rebase a
            branch, Git will automatically merge changes when possible. When it cannot, it will
            mark the file as having a conflict. When this happens, you will need to manually
            resolve the conflict.
        </p>
        <p> To rebase a branch, use the <c>git rebase</c> command. For example, to rebase the <c>feature</c> branch onto the <c>master</c> branch, you would use the following command: </p>
        <pre>git rebase master</pre>
        <p>
            When you rebase a branch, Git will automatically merge changes when possible. When it
            cannot, it will mark the file as having a conflict. When this happens, you will need to
            manually resolve the conflict.
        </p>
    </subsection>
    <subsection xml:id="advanced-git_stashing">
        <title>Stashing</title>
        <p>
            Stashing is the process of saving your changes without committing them. When you stash
            your changes, Git will save your changes in a temporary location. You can then restore
            your changes at a later time.
        </p>
        <p> To stash your changes, use the <c>git stash</c> command. To restore your changes, use
            the <c>git stash pop</c> command. For example, to restore your changes, you would use
            the following command: </p>
        <pre>git stash pop</pre>
    </subsection>
</section>
