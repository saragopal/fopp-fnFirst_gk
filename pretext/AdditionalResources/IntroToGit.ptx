<?xml version="1.0"?>
<section xml:id="additional_resources-intro-to-git">
    <title>Intro to Git</title>
    <p>
        <term>Git</term> is a version control system that allows you to track changes to files over
        time. It allows users to track changes to files, revert to earlier versions, and collaborate
        with others. Git is a distributed version control system, which means that the entire
        codebase and history is available on every developer's computer, which allows for easy
        branching and merging. </p>
    <subsection xml:id="intro-to-git_the-history-of-git">
        <title>The History of Git</title>
        <p>
            Git was created by Linus Torvalds, the creator of Linux, in 2005. He created Git because
            he was unhappy
            with the existing version control systems available at the time. He wanted a system that
            was fast and simple. Git was designed to be a low-level version control system, which
            means that it is
            designed to track changes to files, but it did not provide a graphical user interface -
            however,
            there are now many GUIs available for Git.
            Instead, Git
            provides a command-line interface, which allows users to perform any action that they
            want. This allows
            users to create their own workflows and tools that work best for them.
        </p>
    </subsection>
    <subsection xml:id="intro-to-git_repositories">
        <title>Repositories</title>
        <p> A <term>repository</term> is a collection of files and the history of those files. A
            repository can be thought of as a folder that contains all of the files and folders in a
            project, as well as the history of those files. </p>
        <p>
            For most projects, you'll be setting up a repository on GitHub, which is a website that
            hosts Git repositories. There are other alternatives out there, such as Bitbucket and
            GitLab, but GitHub is the most popular.
        </p>
        <p>
            Creating a repository on GitHub requires the following steps:
        </p>
        <ol>
            <li>
                <p> Select the <code>New</code> button in the top left corner of the screen. </p>
            </li>
            <li>
                <p>
                    Enter a name for your repository. This should be a short, descriptive name that
                    describes the project.
                </p>
            </li>
            <li>
                <p> Select the privacy level for your repository. If you want to share your code
                    with others, you can select <code>Public</code>. If you want to keep your code
                    private, or if you want to share your code with a select group of people, you
                    can select <code>Private</code>. </p>
            </li>
            <li>
                <p>
                    If you want to add a README file to your repository, that is a document
                    detailing
                    additional information about your project, you can select the checkbox.
                </p>
            </li>
            <li>
                <p> Consider adding a <code>.gitignore</code> file to your repository. This is a
                    file that tells Git to ignore certain files and folders. This is helpful for
                    hiding things like passwords and other sensitive information, as well as files
                    that are generated by your code that you don't want to track. </p>
            </li>
            <li>
                <p> Also consider adding a <code>license</code> file to your repository. This is a
                    file that tells others how they can use your code. There are many different
                    licenses available, but the most common is the MIT license, which allows others
                    to use your code for any purpose, as long as they give you credit. A similar
                    license is the GNU General Public License, which allows others to use your code
                    for any purpose, as long as they give you credit and allow others to use their
                    code for any purpose. </p>
            </li>
            <li>
                <p> Select the <code>Create repository</code> button. </p>
            </li>
        </ol>
    </subsection>
    <subsection xml:id="intro-to-git_cloning-a-repository">
        <title>Cloning a Repository</title>
        <p>
            <term>Cloning</term> a repository means downloading a copy of the repository to your
            computer. This allows you to make changes to the files in the repository, and then
            upload those changes back to the repository. This is the most common way to work with
            Git. </p>
        <p> To clone a repository, you'll need to have Git installed on your computer. You can
            download Git from <url href="https://git-scm.com/downloads" visible="https://git-scm.com/downloads">git-scm.com/downloads</url>.
            Once you have Git installed, you can clone a repository by running the following
            command: </p>
        <pre>git clone &lt;YOUR_REPOSITORY_URL&gt;</pre>
        <p> You can find the URL for your repository by selecting the <code>Code</code> button on
            your repository's page on GitHub, and then selecting the <code>HTTPS</code> option. All
            Git repositories hosted on GitHub end in <code>.git</code>. </p>
    </subsection>
    <subsection xml:id="intro-to-git_staging-and-committing">
        <title>Staging and Committing</title>
        <p>
            <term>Staging</term> a file means telling Git that you want to include the file in your
            next commit. A <term>commit</term> is a snapshot of the files in your repository at a
            given point in time. A commit is a way to save your work, and it allows you to revert
            back to that point in time if you make a mistake. </p>
        <p> To stage a file, you can run the following command: </p>
        <pre>git add &lt;FILE&gt;</pre>
        <p> To stage all of the files in your repository, you can run the following command: </p>
        <pre>git add .</pre>
        <p> In order to
            verify that the files have been staged, you can run the following command: </p>
        <pre>git status</pre>
        <p> This will show you all of the files that have been staged, as well as all of the files
            that have been modified since the last commit. </p>
        <p> Once you have staged all of the files that you want to include in your commit, you can
            run the following command to create a commit: </p>
        <pre>git commit -m "YOUR COMMIT MESSAGE"</pre>
        <p> The commit message should be a short description of the changes that you made. If you'd
            like to add a second line to your commit message, you can tag on the <code>-m</code>
            flag again, followed by another message. </p>
    </subsection>
    <subsection xml:id="intro-to-git_pushing-and-pulling">
        <title>Pushing and Pulling</title>
        <p>
            <term>Pushing</term> a commit means uploading the commit to the repository on GitHub.
            This allows others to see the changes that you've made. </p>
        <p> To push a commit, you can run the following command: </p>
        <pre>git push</pre>
        <p> Up to this point outlines the basic workflow for working with Git. You can make changes
            to the files in your repository, stage the files that you want to include in your
            commit, create a commit, and then push the commit to GitHub. </p>
        <p> If you are working with others, or working on multiple computers, you may need to <term>
            pull</term> changes from GitHub. Pulling changes means downloading the latest changes
            from GitHub. This allows you to see the changes that others have made, and it allows you
            to work on the latest version of the code. </p>
        <p> To pull changes from GitHub, you can run the following command: </p>
        <pre>git pull</pre>
        <note>
            <title>
                Rule of Thumb
            </title>
            <p>
                A good rule of thumb is to always pull before you start working on a project, as
                well as before your
                commit and push your changes. This ensures that you are working on the latest
                version of the code, and
                that you don't have any conflicts when you push your changes. Conflicts and how to
                resolve them will be
                covered in a later section.
            </p>
        </note>
    </subsection>
</section>
