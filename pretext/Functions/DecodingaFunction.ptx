<?xml version="1.0"?>
<section xml:id="functions_decoding-a-function">
  <title>Decoding a Function</title>
  <p>In general, when you see a function definition you will try figure out what the function does,
    but, unless you are writing the function, you won't care <em>how it does it (recall <term>abstraction</term>)</em>.</p>
  <p>For example, here is a summary of some functions we have seen already.</p>
  <p>
    <ul>
      <li>
        <p><c>input</c> takes one parameter, a string. It is displayed to the user. Whatever the
          user types is returned, as a string.</p>
      </li>
      <li>
        <p><c>int</c> takes one parameter. It can be of any type that can be converted into an
          integer, such as a floating point number or a string whose characters are all digits.</p>
      </li>
    </ul>
  </p>
  <p>Sometimes, you will be presented with a function definition whose operation is not so neatly
    summarized
    as above. Sometimes you will need to look at the code, either the function definition or code
    that
    invokes the function, in order to figure out what it does. (Consider practicing this by <url href="https://docs.python.org/3/library/functions.html#print" 
    visual="Official Python documentation - Have you started to develop the habit of looking at this?">looking up the <c>print</c>functions docstring.</url>)</p>
  <p>To build your understanding of any function, you should aim to answer the following questions:</p>
  <p>
    <ol marker="1">
      <li>
        <p>How many parameters does it have?</p>
      </li>
      <li>
        <p>What data type(s) are being passed when the function is
          invoked?</p>
      </li>
      <li>
        <p>What is the type of the return value that the function produces when it
          executes?</p>
      </li>
    </ol>
  </p>
  <p>If you try to make use of functions, ones you write or that others write, without being able to
    answer
    these questions, you will find that your debugging sessions are long and painful.</p>
  <p>The first question is always easy to answer. Look at the line with the function definition,
    look inside
    the parentheses, and count how many variable names there are.</p>
  <p>The second and third questions are not always so easy to answer. In Python, unlike some other
    programming
    languages, variables are not declared to have fixed types, and the same holds true for the
    variable names
    that appear as formal parameters of functions. You have to figure it out from context.</p>
  <p>To figure out the types of values that a function expects to receive as parameters, you can
    look at the
    function invocations or you can look at the operations that are performed on the parameters
    inside the function.</p>
  <p>Here are some clues that can help you determine the type of object associated with any
    variable, including a
    function parameter. If you see&#x2026;</p>
  <p>
    <ul>
      <li>
        <p>a built in function, look at its docstring to see what it requires and what it returns. For example, <c>len(x)</c>, must be passed a sequence data type like a string and will return an integer. x can't be a number or a Boolean.</p>
      </li>
      <li>
        <p>mathematical operators, then:</p>
        <ul>
          <li>
            <p><c>x - y</c>, <c>x / y</c>, or <c>x ** y</c>: x and y must be numbers (integer or float)</p>
          </li>

          <li>
            <p><c>x + y</c>: x and y must <em>both</em> be numbers or <em>both</em> be strings</p>
          </li>
         <li>
            <p><c>x * y</c>: x and y can <em>both</em> be numbers; or one can be a string and the other <em>must</em> be a number</p>
          </li>
        </ul>
        
      </li>
    
      <!-- <li>
        <p><c>x[3]</c>, x must be a string or a list containing at least four items, or x must be a
          dictionary that includes 3 as a key.</p>
      </li>
      <li>
        <p><c>x['3']</c>, x must be a dictionary, with &#x2018;3' as a key.</p>
      </li>
      <li>
        <p><c>x[y:z]</c>, x must be a sequence (string or list), and y and z must be integers</p>
      </li> -->
      <li>
        <p>logical operators like <c>x and y</c>,<c>x or y</c>, <c>not(x)</c>: x and y must be data types that <url href="https://docs.python.org/3/library/stdtypes.html" visual="Built-in Types Python Docs">
        can be evaluated as Booleans.</url></p>
      </li>
      <!-- <li>
        <p><c>for x in y</c>, y must be a sequence (string or list) or a dictionary (in which case
          it's really the dictionary's keys); x must be a character if y is a string; if y is a
          list, x could be of any type.</p>
      </li> -->
    </ul>
  </p>
  <p>
    <term>Check your understanding: decode this function definition</term>
  </p>
  <exercise label="question4_6_1">
    <statement>
      <p>How many parameters does function cyu3 take?</p>
      <program language="python">
        <input>
          def cyu3(x: ???, y: ???) -&gt; ???:
            COEFFICIENT = 2.5
            return (x + y) * COEFFICIENT
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Count the number of variable names inside the parenetheses on line 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Count the number of variable names inside the parenetheses on line 1.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>x and y.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>Count the number of variable names inside the parenetheses on line 1.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Can't tell</p>
        </statement>
        <feedback>
          <p>You can tell by looking inside the parentheses on line 1. Each variable name is
            separated by a comma.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_6_2">
    <statement>
      <p>What are the possible types of variables x and y?</p>
      <program language="python">
        <input>
          def cyu3(x: ???, y: ???) -&gt; ???:
            COEFFICIENT = 2.5
            return (x + y) * COEFFICIENT
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>integer</p>
        </statement>
        <feedback>
          <p>Addition and multiplication can be performed on both floats and integers.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>float</p>
        </statement>
        <feedback>
          <p>Addition and multiplication can be performed on both floats and integers.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>x could be a string and y could be a float</p>
        </statement>
        <feedback>
          <p>Although possible, there's a more general answer.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>string</p>
        </statement>
        <feedback>
          <p>Strings cannot be multiplied by a float.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Can't tell</p>
        </statement>
        <feedback>
          <p>You can tell from some of the operations that are performed on them.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_6_3">
    <statement>
      <p>What datatype is returned?</p>
      <program language="python">
        <input>
          def cyu3(x: ???, y: ???) -&gt; ???:
            COEFFICIENT = 2.5
            return (x + y) * COEFFICIENT
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>integer</p>
        </statement>
        <feedback>
          <p>Since the sum of x and y is multiplied by a float, the value can not be an integer.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>float</p>
        </statement>
        <feedback>
          <p>The sum of x and y is multiplied by a float, meaning the returned value is a float.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>string</p>
        </statement>
        <feedback>
          <p>Strings cannot be multiplied by floats.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>boolean</p>
        </statement>
        <feedback>
          <p>There are no boolean operations in the given function.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Can't tell</p>
        </statement>
        <feedback>
          <p>You can tell from some of the operations that are performed on it.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_6_4">
    <statement>
      <p>What should this function's header look like?</p>
      <program language="python">
        <input>
          """
          Calculates the combined areas of two squares.

          Parameters:
            width_a : _____
            The width of the first square.
            width_b : _____
            The width of the second square.

          Returns:
            _____ : The combined areas of the squares.
          """
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>def squares_area(width_a: int, width_b: int) -&gt; int:</p>
        </statement>
        <feedback>
          <p>Since both pieces of data are integers, and the formula for calculating the area of a
            square wouldn't result in a float given an integer, this would be correct.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>def squares_area(width_a: float, width_b: float) -&gt; int:</p>
        </statement>
        <feedback>
          <p>Based on the formula for finding the area of a square, and that no rounding is present,
            by giving this function two floats, an integer would not be returned.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>def squares_area(width_a: int, width_b: int) -&gt; float:</p>
        </statement>
        <feedback>
          <p>Based on the formula for finding the area of a square, and that the widths are only
            being multiplied, by giving this function two integers, a float could not be returned.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>def squares_area(width_a: float, width_b: float) -&gt; float:</p>
        </statement>
        <feedback>
          <p>Since both pieces of data are floats, and the formula for calculating the area of a
            square would result in a float given a float, this would be correct.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>def squares_area(width_a, width_b):</p>
        </statement>
        <feedback>
          <p>Although technically correct, type hinting would make this function easier to
            interpret.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
