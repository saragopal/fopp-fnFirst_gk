<?xml version="1.0"?>
<section xml:id="functions_global-variables">
  <title>Global Variables</title>
  <p>Variable names that are at the <em>top-level</em>, not inside any function definition,
            are called <term>global variables</term> and they have a global scope.</p>
  <p>It is possible and syntactically valid for a function to access a global variable. However, doing so is considered
            <alert>bad form</alert> by nearly all programmers and should be avoided. This subsection
            includes some examples that illustrate the potential interactions of global and
            local variables. These will help you better understand variable scope. Hopefully,
            they will also convince you that things can get pretty confusing when you mix
            local and global variables, and that you really shouldn't do it.</p>

<note>
  <title>Instructor's Note</title>
  <p>
    Relying on global variables is a really bad habit to pick up, as
    Python is a language that lets you get away with globals pretty
    easily. As you move on to other languages, you'll be
    in for a world of pain if you don't learn to avoid globals. Be warned.
  </p>
  
</note>

  <p>Look at the following, working but poor form variation of the square function.</p>
  <program xml:id="ac4_9_1" interactive="activecode" language="python">
    <input>
def badsquare(x):
    y = x ** power
    return y

power = 2
result = badsquare(10)
print(result)
        </input>
  </program>
  <p>Although the <c>badsquare</c> function works, it is poorly written. It illustrates
            an important rule about how variables are looked up in Python.
            First, Python looks at the variables that are defined as local variables in
            the function.  Recall, this is the function's <alert>local</alert> scope. If the variable name is not
            found in the local scope, then Python looks at the global variables,
            or <alert>global</alert> scope. This is the case illustrated in the code above.
            The variable <c>power</c> is not found locally in <c>badsquare</c> but it does exist globally.
            The appropriate way to write this function would be to pass power as a second parameter.
            Practice this by using <c>Edit this code</c> to rewrite the badsquare example to have a second parameter.</p>
  <p>There is another variation on this theme of local versus global variables. <alert>Assignment statements in the local function cannot
            change variables defined outside the function.</alert> Consider the following
            CodeLens example:</p>
  <program xml:id="clens4_9_1" interactive="codelens" language="python">
    <input>
def powerof(x,p):
    power = p     # Another dumb mistake
    y = x ** power
    return y

power = 3
result = powerof(10,2)
print(result)
    </input>
  </program>
  <p>Now step through the code. What do you notice about the values of variable <c>power</c>
            in the local scope compared to the variable <c>power</c> in the global scope?</p>
  <p>There are two variables called <c>power</c>, each with a different scope: a <c>power</c> variable local to the function's scope
  (created at line 3 inside the function),
  and a separate <c>power</c> variable that has global scope (assigned a value at line 7).</p>
  <p> When a variable name is used on the
            left hand side of an assignment statement Python creates a variable that with a set scope.
            When a local variable has the same name as a global variable we say that the
            local shadows the global. A <term>shadow</term> means that the global variable cannot
            be accessed by Python because the local variable will be found first. This is
            another good reason not to use global variables with the same names as local variables. 
            As you can see,
            it makes your code confusing and difficult to understand.</p>
  <p>If you really want to change the value of a global variable inside a function,
            you can can do it by explicitly declaring the variable to be global, as in the example
            below. Again, you should <em>not</em> do this in your code. The example is here only
            to illustrate how scope in Python works.</p>
  <program xml:id="clens4_9_2" interactive="codelens" language="python">
    <input>
def powerof(x,p):
    global power  # a really...
    power = p     # ...bad idea, but valid code
    y = x ** power
    return y

power = 3
result = powerof(10,2)
print(result)
print(power)
    </input>
  </program>
  <p>To cement your understanding of these ideas even further lets look at one final example.
            Inside the following <c>square</c> function we are going to make an assignment to the
            parameter <c>x</c> in line 3.  There's no good reason to do this other than to emphasize
            the fact that the parameter <c>x</c> is a local variable.  If you step through
            the example in codelens you will see that although <c>x</c> is 0 in the local
            variables for <c>square</c>, the <c>x</c> in the global scope remains 2.  This is confusing
            to many beginning programmers who think that an assignment to a
            formal parameter will cause a change to the value of the variable that was
            used as the actual parameter, especially when the two share the same name.
            But this example demonstrates that that is clearly not how Python operates.</p>

  <program xml:id="clens4_9_3" interactive="codelens" language="python">
    <input>
def square(x):
    y = x * x
    x = 0       # assign a new value to the parameter x
    return y

x = 2
z = square(x)
print(z)
    </input>
  </program>


  <note>

  <p>
    <alert>Instructor's Counsel:</alert> <em>Just because you can, doesn't mean you should.</em> Global variables exist,
  but, as a novice programmer, you really should not use them (except in the case of <term>named constants</term>). </p>

  </note>
  
  <p>
    <alert>Check your understanding</alert>
  </p>
  <exercise label="question4_9_1">
    <statement>
      <p>What is a variable's scope?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Its value</p>
        </statement>
        <feedback>
          <p>Value is the contents of the variable.  Scope concerns where the variable is "known".</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>The range of statements in the code where a variable can be accessed.</p>
        </statement>
        <feedback>
          <p>Correct.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Its name</p>
        </statement>
        <feedback>
          <p>The name of a variable is just an identifier or alias.  Scope concerns where the variable is "known".</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_9_2">
    <statement>
      <p>What is a local variable?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A temporary variable that is only used inside a function</p>
        </statement>
        <feedback>
          <p>Yes, a local variable is a temporary variable that is only known (only exists) in the function it is defined in.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The same as a parameter</p>
        </statement>
        <feedback>
          <p>While parameters may be considered local variables, functions may also define and use additional local variables.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Another name for any variable</p>
        </statement>
        <feedback>
          <p>Variables that are used outside a function are not local, but rather global variables.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_9_3">
    <statement>
      <p>Can you use the same name for a local variable as a global variable?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Yes, and there is no reason not to.</p>
        </statement>
        <feedback>
          <p>While there is no problem as far as Python is concerned, it is generally considered bad style because of the potential for the programmer to get confused.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Yes, but it is considered bad form.</p>
        </statement>
        <feedback>
          <p>it is generally considered bad style because of the potential for the programmer to get confused.  If you must use global variables (also generally bad form) make sure they have unique names.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>No, it will cause an error.</p>
        </statement>
        <feedback>
          <p>Python manages global and local scope separately and has clear rules for how to handle variables with the same name in different scopes, so this will not cause a Python error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <note>
    <p><alert>Are there any times one should use global variables? No.</alert></p>

    <p>More correctly, you should not use global variables unless there is a very good reason.</p>

    <p>The problem with with global variables is that they can easily lead to unintentional changes that propagate
    throughout the the entire programs. While it may make sense to change a global variable for one specific function, doing so 
    may mess up the processing for all the other functions. Consider a function that is designed to round and display
    an assessment's mark to the nearest whole percentage (78.7% becomes 79%). However, when calculating 
    an overall course grade, we don't use the individual assignments' rounded marks, we use their raw, unrounded marks (you don't 'round' a 'rounded' mark).
    So global changes to individual assessement grades would make the overall course grade incorrect. However, it <em>might</em> make sense to 
    round the overall course grade (changed as a global variable) when that final overall grade is being sent to the Registrar.</p>
    <p>An example of an appropriate use of a global variable is the use of a constant by a series of functions. In the example below, <c>PI</c> is 
    a global variable (a constant) that does not need to be defined locally for each of the functions. Do note, <c>PI</c> is <alert>not</alert>
    changed within any of the functions.</p>
<p>
       <program language="python">
    <input>
    from math import pi as PI
    def area_circle( any_radius: float ) -> float:
        """with any length greater than zero, returns area"""
        return (PI * any_radius**2)

    def circumference_circle(any_radius:float) -> float:
        """with any length greater than zero, returns circumference"""
        return (2 * PI * any_radius)

    def volume_sphere(any_radius:float) -> float:
        """With any length greater than zero, returns volume"""
        return (4/3 * PI * any_radius**3)

    </input>
  </program>
    </p>
    
  </note>
  
</section>
