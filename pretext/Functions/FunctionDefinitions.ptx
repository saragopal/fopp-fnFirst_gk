<?xml version="1.0"?>
<section xml:id="functions_function-definition">
  <title>Function Definition</title>
  <p>The syntax for creating a named function, a <term>function definition</term>, is:</p>
  <program language="python">
    <input>
      def name( parameters ):
          statements
    </input>
  </program>
  <p>You can make up any names you want for the functions you create, except that you can't use a
    name that is a Python keyword, and the names must follow the rules for legal identifiers that were previously explained for variables. </p>
    <p>
    It is good practice to choose function names that are meaningful to the human readers of the program. 
    This means the names will need to be unique and to make clear the function's purpose. Since functions 'do' something, some programmers 
    like to use verbs in their function names.</p>

<program language="python">
    <input>
      def find_Average (grades:list ) -> float:
          statements

      def increase (number:int, by=2) -> int:
         statements
    </input>
  </program>
  <p>
    The parameters specify
    what information, if any, you have to provide in order to use the new function. 
    Another way to say this is that the parameters specify what the function needs to do its work.
    Notice that in the example function headers above, the programmer has included hints to indicate the parameter's data type and/or its value. 
    And, the data type of the function's result has been annotated too. Be sure to check out the text's later section \
    on "Type Annotations" for more explanation on these ideas.</p>
  <p>There can be any number of statements inside the function's body, but they have to be indented from
    the <c>def</c>. Function definitions are one of several <term>compound statements</term> we will
    see, all of which have the same pattern:</p>
  <p>
    <ol marker="1">
      <li>
        <p>A <term>header line</term> which begins with a keyword and ends with a colon, <c>:</c>.</p>
      </li>
      <li>
        <p>A <term>body</term> consisting of one or more Python statements, each indented the same
          amount &#x2013; <em>4 spaces is the Python standard</em> &#x2013; from the header line.</p>
      </li>
    </ol>
  </p>
  <p>Later we will see conditionals,<c>if</c>, <c>elif</c>, and <c>else</c> statements, and interations, <c>for</c> and <c>while</c> statements, 
  that have the same strucure where each has an indented block of code.</p>
  <p>In a function definition, the keyword in the header is <c>def</c>, which is followed by the
    name of the function and some <em>parameter names</em> enclosed in parentheses. The parameter
    list may be empty, or it may contain any number of parameters separated from one another by
    commas. In either case, the parentheses are required.</p>
  <p>We will come back to the parameters in a little while, but first let's see what happens when a
    function is executed,
    using a function without any parameters to illustrate.</p>
  <p>Here's the definition of a simple function, hello.</p>
  <program xml:id="ac4_2_1" interactive="activecode" language="python">
    <input>
      def hello() -&gt; None:
          """This function says hello and greets you"""
          print("Hello")
          print("Glad to meet you")
    </input>
  </program>
  <note>
    <title>docstrings</title>
    <p>By convention, Python programmers use a triple-quoted string as the first line(s) of the function's body,
    to have one- or two-sentences used to explain their functions, making clear the function's parameters (data type requirements, limitations to their values, default values if set)
      and the return value (if there is one).</p>
      <p>This unassigned string literal is called a <term>docstring</term> (documentation string) and because it gets special treatment in
      Python, you can use the interactive interpreter <em>at runtime</em>, and enter the
      expression <c>&lt;function_name&gt;.__doc__</c>, or <c>help(&lt;function_name&gt;</c>), to retrieve a function's docstring (and thus its explanation). This is different from comments in your code, which are
      completely ignored when the program is run.</p>
    
  </note>
  </section>
