<?xml version="1.0"?>
<section xml:id="functions_functions-can-call-other-functions-composition">
  <title>Functions can call other functions (Composition)</title>
  <p>It is important to understand that each of the functions we write can be used and called from
    other functions we write. This is one of the most important ways that computer programmers take
    a large problem and break it down into a group of smaller problems. This process of breaking a
    problem into smaller, more easily solved, subproblems is called <term>functional decomposition</term>.</p>
  <p>Here's a simple example of functional decomposition using two functions. The first function
    called <c>square</c> simply computes the square of a given number. The second function called <c>sum_of_squares</c> 
    makes use of <c>square</c> to compute the sum of three numbers that have been
    squared. <em>BTW: This 'sum of squares' process is part of a very common statistical calcuation used to determine variation and ultimately standard deviation.</em></p>
  <program xml:id="clens4_10_1" interactive="codelens" language="python">
    <input>
      def square(x):
          y = x * x
          return y

      def sum_of_squares(x,y,z):
          a = square(x)
          b = square(y)
          c = square(z)

          return a+b+c

      a = -5
      b = 2
      c = 10
      result = sum_of_squares(a,b,c)
      print(result)
    </input>
  </program>
  <p>Even though this is a pretty simple idea, in practice this example illustrates many very
    important Python concepts, including local variables, global variables, parameter passing, and how a larger function can be <alert>decomposed</alert>
    into smaller sub-functions.The function <c>sum_of_squares</c> is <alert>composed</alert> of the <c>square</c>function and some addition.</p>
    <p>
    Note that the body of <c>square</c> is not executed until it is called from inside the <c>sum_of_squares</c> function for the first time on line 6.</p>

  <p>Also notice that when <c>square</c> is called (at Steps 8, 13, and 18), there are two groups of
    local variables, one for <c>square</c> and one for <c>sum_of_squares</c>. Each group of local
    variables is called a <term>stack frame</term>. The variables <c>x</c>, and <c>y</c> are local
    variables in both functions. These are completely different variables, even though they have the
    same name. Each function invocation creates a new frame, and variables are looked up in that
    frame. Notice that at step 11, y has the value 25 is one frame and 2 in the other.</p>
  <p>What happens when you to refer to variable y on line 3 at this step? Python looks up the value of y in the
    stack frame for the <c>square</c> function. If it didn't find it there, it would go look in the
    global frame.</p>
  
  
  
  <p>Let's use composition to build up another function: finding the area of <alert>any</alert> regular polygon.</p>
  <p>Knowing that:</p>
  <ul>
  <li><p>Regular polygons are 2D shapes that have more than 3 sides where all sides have the same length.</p></li>
  <li><p>The perpendicular measurement from the midpoint of one of the sides to the center of the polygon is called the <alert>apothem</alert>.</p></li>
  <li><p>The length of the apothem for a polygon with <m>n</m> sides of length <m>length</m> can be found with:</p>
  <p> 
  <me>
    apothem = \frac{length}{2\tan(180/n)}
  </me>
   </p> 
  </li>
  <li><p>The perimeter of the polygon can be found with:</p>
  <p>
  <me>
    perimeter = length * n
  </me>
  
  </p> </li>
  </ul> 
  <p> Then the area of a regular polygon can be found with the following formula:</p>
  <p>
  <me>
  area = \frac{perimeter * apothem}{2}
  </me>
    
  </p>

  <p>We can decompose the problem of finding the area of a regular polygon into:</p>
  <ol>
  <li>
    <p>
      Set the number of sides.
    </p>
  </li>
  <li>
    <p>
      Set the length of the sides.
    </p>
  </li>
  <li>
    <p>
      Determine the apothem.
    </p>
  </li>
  <li>
    <p>
      Determine the perimeter.
    </p>
  </li>
  <li>
    <p>
      Determine the area.
    </p>
  </li>
  </ol>
  <p>Thus the sub functions are:</p>
<program language="python">
    <input>
      def apothem (sides:int,length:float ) -> float:
          """With sides more than 3 and length greater than zero"""
          from math import tan, radians # math module's tan only works in radians
          an_apo = length / (2 * tan (radians(180/sides)))
          return an_apo 

      def perimeter (sides:int, length:float) -> float:
          """with sides more than 3 and length greater than zero"""
          a_per = sides * length
          return a_per 

      def area(sides:int, length:float)->float:
          """with sides more than 3 and length greater than zero"""
          apo = apothem(sides,length)
          per = perimeter(sides, length)
          return per * apo /2 

    </input>
  </program>

<p><alert>On paper</alert>, trace what will happen, the values of the local and global variables with this function call testing a square with of 10 units long: <c>test=area(4,10)</c>. 
Try some other polygons of your own to test the algorithm. <em>In your own words, express how the algorithm to find the area of a regular polygon has been
functionally decomposed.</em></p>



  <p>
    <alert>Check your Understanding</alert>
  </p>
  <exercise label="ac4_10_1">
    <statement>
      <p><term>1.</term> Write two functions, one called <c>addit</c> and one called <c>mult</c>. <c>
        addit</c> takes one number as an input and adds 5. <c>mult</c> takes one number as an input,
        and multiplies that input by whatever is returned by <c>addit</c>, and then returns the
        result.</p>
    </statement>
    <program xml:id="ac4_10_1_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testOne(self):
            self.assertEqual(mult(1), 6,"Testing the function mult with input 1 (should be 6)")
            self.assertEqual(mult(-2), -6, "Testing the function mult with input -2 (should be -6)")
            self.assertEqual(mult(0), 0, "Testing the function mult with input 0 (should be 0)")

          def testTwo(self):
            self.assertEqual(addit(1), 6, "Testing the function addit with input 1 (should be 6)")
            self.assertEqual(addit(-2), 3, "Testing the function addit with input -2 (should be 3)")
            self.assertEqual(addit(0), 5, "Testing the function addit with input 0 (should be 5)")
        myTests().main()
      </input>
    </program>
  </exercise>
</section>
