<?xml version="1.0"?>
<section xml:id="functions_chapter-assessment">
  <title>Chapter Assessment</title>
  <exercise label="ac4_15_1">
    <statement>
      <p>Write a function called <c>int_return</c> that takes an integer as input and returns the
        same integer.</p>
    </statement>
    <program xml:id="ac11_15_1_editor" interactive="activecode" language="python">
      <input>
        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testOne(self):
            self.assertEqual(int_return(10), 10, "Testing that function int_return(10) returns 10")
        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_15_2">
    <statement>
      <p>Write a function called <c>add</c> that takes any number as its input and returns that sum
        with 2 added.</p>
    </statement>
    <program xml:id="ac4_15_2_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testTwo(self):
            self.assertEqual(add(-2), 0, "Testing that add(-2) returns 0")
            self.assertEqual(add(6), 8, "Testing that add(6) returns 8")
            self.assertEqual(add(4), 6, "Testing that add(4) returns 6")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_15_3">
    <statement>
      <p>Write a function called <c>change</c> that takes any string, adds <q>Nice to meet you!</q>
        to the end of the argument given, and returns that new string.</p>
    </statement>
    <program xml:id="ac4_15_3_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testThree(self):
            self.assertEqual(change("I'm Bob. "), "I'm Bob. Nice to meet you!", "Tests that change('I'm Bob. '') returns 'I'm Bob. Nice to meet you!'")
            self.assertEqual(change(""), "Nice to meet you!", "Tests that change() returns 'Nice to meet you!'")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_15_4">
    <statement>
      <p>Write a function, <c>addup</c>, that takes five integers as inputs and returns the sum of
        those integers.</p>
    </statement>
    <program xml:id="ac4_15_4_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testFourA(self):
            self.assertEqual(addup(1, 2, 3, 4, 5), 15, "Tests that addup(1, 2, 3, 4, 5) returns 15")
            self.assertEqual(addup(0, 0, 0, 0, 1), 1, "Tests that addup(0, 0, 0, 0, 1) returns 1")
            self.assertEqual(addup(-1, 1, -2, 2, -3), -3, "Tests that addup(-1, 1, -2, 2, -3) returns -3")
        myTests().main()
      </input>
    </program>
  </exercise>
  <!-- <exercise label="ac11_15_5">
    <statement>
      <p>Write a function, <c>length</c>, that takes in a list as the input. If the length of the
        list is greater than or equal to 5, return <q>Longer than 5</q>. If the length is less than
        5, return <q>Less than 5</q>.</p>
    </statement>
    <program xml:id="ac11_15_5_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

        def testFive(self):
        self.assertEqual(length([]), "Less than 5", "Tests that length([]) returns 'Less than 5'")
        self.assertEqual(length([2, 2]), "Less than 5", "Tests that length([2, 2]) returns 'Less
        than 5'")
        self.assertEqual(length([4, 4, 4, 3, 5, 6, 7, 8, 9]), "Longer than 5", "Tests that
        length([4, 4, 4, 3, 5, 6, 7, 8, 9]) returns 'Longer than 5'")
        self.assertEqual(length([1, 1, 1, 1, 1]), "Longer than 5", "Tests that length([1, 1, 1, 1,
        1]) returns 'Longer than 5'")

        myTests().main()
      </input>
    </program>
  </exercise> -->
  <exercise label="ac4_15_5">
    <statement>
      <p>You will need to write two functions for this problem. The first function, <c>divide</c>
        that takes in any number and returns that same number divided by 2. The second function
        called <c>sum</c> should take any number, divide it by 2, and add 6. It should return this
        new number. You should call the <c>divide</c> function within the <c>sum</c> function. Do
        not worry about decimals.</p>
    </statement>
    <program xml:id="ac4_15_5_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

          def testSixA(self):
            self.assertEqual(divide(4), 2, "Tests that divide(4) returns 2")
          def testSixB(self):
            self.assertEqual(sum(4), 8, "Tests that sum(4) returns 8")
            self.assertEqual(sum(2), 7, "Tests that sum(2) returns 7")
            self.assertEqual(sum(-6), 3, "Tests that sum(-6) returns 3")
            self.assertEqual(sum(0), 6, "Tests that sum(0) returns 6")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_15_6">
    <statement>
      <p>You will need to write three functions for this problem.</p>
      <ul>
        <li>
          <p> The first function, <c>average</c>
          that takes in any three numbers and returns the average.
          </p>
        </li>
        <li>
          <p> The second function
          called <c>diffSquare</c> that takes one number and the average of the three numbers, subtracts those numbers, and then returns the square of this difference.
          </p>
        </li>
        <li>
          <p>
            A third function called <c>stdev</c> which is passed the three numbers and then:
            </p>
            <ol>
              <li>
                <p>
                  Calls on <c>average</c> to find the averaage of those three values, and assign the resulting average to a local variable.
                </p>
              </li>
              <li>
                <p>
                  Calls on <c>diffSquare</c> three times, passing each of the three numbers in turn and the local variable average, assigning the resulting squared differences to three
                  local variables.
                </p>
              </li>
              <li>
                <p>
                  Calls on <c>average</c> again, this time passing in the three squared differences, and assigning this new average to a variable called <c>variance</c>.
                </p>
              </li>
            </ol>
        </li>
        <li>
          <p>
            Finally, <c>stdev</c> finds the square root of <c>variance</c> as the standard deviation
          </p>
        </li>
      </ul>
      <p> Do not worry about rounding the decimals.</p>
    </statement>
    <program xml:id="ac4_15_6_editor" interactive="activecode" language="python">
      <input>
      """
      Using these values: 10, 13, 15,
      you should get:
      - an average of 12.66666667.
      - these squared differences are: 7.1111111 0.11111111, 5.4444444
      - which sum to 12.66666667 and average to be 4.2222222
      - the square root of which is: 2.054804667
      """"

      def average( ,  ,  ): 




          return mean


      def diffSquare(   ,   ): 





          return squaredDifference


      def stdev(   ,   ,   ):


          variance = average (  ,   ,   )
          return variance**(1/2)

      print('The standard deviation of the values 10, 13 and 15 is', stdev(10,13,15))


      </input>
    </program>
  </exercise>
</section>
