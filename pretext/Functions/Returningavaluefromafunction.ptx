<?xml version="1.0"?>
<section xml:id="functions_returning-a-value-from-a-function">
  <title>Returning a value from a function</title>

  <p>The functions we've used as examples thus far have not been all that useful: we enclosed <c>print()</c> functions within 
  our own function, as a way to illustrate parameters, when we could have just used the <c>print()</c> functions on their own. And, the
  functions we've defined so far don't do much to be useful to help solve a decomposed larger problem. One of the reasons that our illustrative
  functions don't appear to be useful is because few of them have returned a value. In this section we will discuss how to create more useful functions that 
  produce useful data for our problem solving.</p>

  <p>Functions that don't return a value are sometimes called <term>procedures</term>, <term>non-fruitful</term> or <term>void functions</term>. 
  Notice how in the function header example below the function definition indicates the function returns <c>-> None</c>, that there is no data being processed, and that there is no <c>return</c> statement. <term>None</term> is a special Python value used to indicate no value at all.</p>
  <note>
  <alert>None</alert> is not the same as 0, False, or an empty string (<c>""</c>). It is its own data type (<c>NoneType</c>). Some other computer languages use the term <c>null</c>.
  </note>
  
  <program xml:id="ac4_2_1_alt" interactive="activecode" language="python">
    <input>
      def hello() -&gt; None:
          """This function says hello and greets you
          but no value is returned."""
          print("Hello")
          print("Glad to meet you")
    </input>
  </program> 

  <p>More usefully, a function can also be used to produce a value from from one or more parameters. </p>

  <image source="Functions/Figures/function_call.gif" width="50%"
    alt="gif of a box labeled function with three spaces on the top for input and a space on the bottom for output. Three arrows enter the top and are labeled as input or arguments. The function box shakes, and then one arrow leaves the bottom of the function box." />

<p>You probably can appreciate how a built-in Python function like <c>= abs()</c> will find, and then return, the absolute
value of a provided number. Or how <c>= input()</c> returns anything a user types on the keyboard as a string.</p>

<p>These kinds of functions, ones that return values are sometimes called <term>fruitful functions</term> because they <em>produce</em> a result.</p>
 
  <image source="Functions/Figures/blackboxfun.png" width="50%" />

  <p>How do we write our own fruitful function? Let's start by creating a very simple mathematical
    function that we will call <c>square</c>. The square function will take one number as a
    parameter and return the result of squaring that number. Here is the black-box diagram with the
    Python code following.</p>

  <image source="Functions/Figures/squarefun.png" width="50%" />

  <program xml:id="ac4_5_1" interactive="activecode" language="python">
    <input>
      def square(an_integer: int) -&gt; int:
          """With any integer, this function will produce its squared value."""
          result = an_integer * an_integer
          return result

      the_integer = 10
      result = square(the_integer)
      print(f"The result of {the_integer} squared is {result}.")
      another_integer = 11
      result = square(another_integer)
      print(f"The result of {another_integer} squared is {result}.")

    </input>
  </program>

  <p>The <term>return</term> statement is followed by an expression which is evaluated. Its result
    is returned to the caller (the line of code that invoked the function) as the <q>fruit</q> of calling this function. 
    Because the return
    statement can contain any Python expression we could have avoided creating the <term>temporary
    variable</term> <c>result</c> and simply used <c>return an_integer * an_integer</c>. Try modifying the square function
    above to see that this works just the same. On the other hand, using <term>temporary variables</term>
    like <c>result</c> in the function above makes debugging easier, especially when a function is a many step process. 
    These temporary variables are
    referred to as <term>local variables</term>. In general, programmers should not try to place a multiple step process into the 
    <c>return</c> statement.</p>
  
  <p>Notice something important here: the name of the variable we pass as an argument does not have
   to have anything to do with the name of the formal parameter &#x2014; <c>an_integer</c>.
   You can see this very clearly in the Codelens: it doesn't matter what names the caller uses &#x2014; <c>the_integer</c> or 
   <c>another_integer</c>). When <c>square</c> is executed, inside that function, its parameter, a local variable &#x2014; <c>an_integer</c>, 
   is given the value that is passed, the <em>local temporary</em> variable &#x2014; <c>result</c> is determined, and finally, is the return value that the
   function produces.</p>
  <p>Return the previous CodeLens example and step through the code once again. This time make note of the <em>Frames</em> being displayed, the appearance 
  (and disappearance of) those variables in those frames, and the values of the variables.</p>

  <p>When we suggested earlier that functions could be <em>generalized</em>, this illustrates what we meant. A fruitful function 
  should be coded to deal with any value of parameter(s), process things, and then to provide 
  a value based on its parameter(s).
  Thus, our <c>square</c> function can work <c>"""With any integer..."""</c>.</p>

  <p>It should also be apparent that using <em>self-documenting</em> variables names, like <c>the_integer</c> and 
  <c>another_integer</c>, make clearer what is being passed to the function and what variables are local to the function (<c>an_integer</c> 
  and <c>result</c>). And, using these kinds of self-documenting variable names makes the code easier to design, develop and debug.</p>

  <p>There is one more aspect of fruitful functions. By default, all Python functions
    return the special value <c>None</c> to indicate there is no value at all. This is not the same as <c>0</c>, <c>False</c>, 
    nor an empty string <c>""</c>.</p>

  <note><p>A function will only return a non-None value if it includes an explicit return statement with a value in the function's body.</p>
  </note>

  <p>Notice in the following how the <c>square</c> function does not contain a <c>return</c> statement.
    As you step through this example, pay very close attention to the Return Value in
    the square function's frame. Then look at what is printed when the function is over.</p>
  <program xml:id="clens4_5_2" interactive="codelens" language="python">
    <input>
      def square(an_integer: int) -&gt; None:
        y = an_integer * an_integer
        print(y) # Bad! This is confusing! Should use return instead!

      the_integer = 10
      square_result = square(the_integer)
      print(f"The result of {the_integer} squared is {square_result}.")
    </input>
  </program>

  <p>A problem with this function is that even though it prints the resulting squared value (line 3),
    that value will not be available to be subsequently displayable, accessed nor used after the function has been executed.
    Instead, the value <c>None</c>
    will be returned to the caller's scope. Since line 6 assigns the function's return value to <c>square_result</c>, 
    that variable will have <c>None</c> as its value and that is what will be printed in line 7.</p>
  <p> Much more usefully one would code a fruitful function that 
    return a value and assigns that value to a variables for later processing or display.</p>

  <p>Next, a return statement, once executed, immediately terminates execution of a function, even if it
    is not the last statement in the function. In the following code, when line 3 executes, the
    value 5 is returned and assigned to the variable x, then printed. <alert>Lines 4 and 5 never execute.</alert>
    Run the following code and try making some modifications of it to make sure you understand why <q>
    there</q> and 10 never print out.</p>
  <program xml:id="ac4_5_2" interactive="activecode" language="python">
    <input>
      def weird() -&gt; int:
          print("here")
          return 5
          print("there")
          return 10

      x = weird()
      print(x)
    </input>
  </program>
  <p>The fact that a return statement immediately ends execution of the code block inside a function is important to
    understand for writing complex programs. The following example algorithm uses a programming structure,
    <term>conditionals</term>, that we will cover later, but for now we will use the idea here to hint at what is possible.</p>
    <p>Consider a circumstance where a student's grade has to be greater than or equal to 60% to use it as a prerequisite. A function to check this could be written as follows:</p>
  <program language="python">
     <input>
    def prerequisite_checker( grade: float ) -> bool:
        """Checks if student meets prerequisite grade requirements"""
        if grade &lt; 60:
            return False
        else:
            return True
      </input> 
  </program>
  <p>Do consider the challenges with using multiple return statements: the programmer (and thus the function's code) has to repeat the return statement
  for every circumstance - and cannot overlook even one outcome. In fact, the <em>structured programming</em> tradition considers 
  the use of multiple return statements to be bad practice. Instead, it suggests programmers get
  into the habit of always having a <em>single return statement as very last line of their function's body</em>, to avoid 'forgetting' to 
  include all the returns. This practice, making the last line of every function a return statement, also makes
  tracing and debugging the complex function code easier.</p>

  <p>So far, we have just seen return values being assigned to variables. For example, we had the
    line <c>square_result = square(the_integer)</c>. As with all assignment statements, the right-hand
    side of that instruction is executed first. It invokes the <c>square</c> function, passing in a parameter value 10
    (the current value of <c>the_integer</c>). The function returns a value 100, which completes the evaluation
    of the right-hand side of the assignment. The value 100 is then assigned to the variable <c>square_result</c>.
    In this case, the function invocation was the entire expression that was evaluated.</p>
  <p>Function invocations, however, can also be used as part of more complicated expressions. For
    example, <c>square_result = 2 * square(the_integer + 1)</c>. In this case, the value 11 is evaluated, passed to the function,
    and is returned to the right-hand side of the instructions. Then, the returned value (121) is multiplied by 2 to produce the value 242.</p>
  <p>To reiterate, when executing the line of code <c>square_result = 2 * square(the_integer + 1)</c>, the
    Python interpreter does these steps:</p>
  <p>
    <ol marker="1">
      <li>
        <p>It's an assignment statement, so it evaluates the right-hand side expression 
        <c>2 * square(the_integer + 1)</c>.</p>
      </li>
      <li>
        <p>Looks up the values of the variables square and the_integer: square is a function object and
          the_integer is 10</p>
      </li>
      <li><p>Evalutes the argument expression <c>(the_integer + 1)</c> as 11</p>
      </li>
      <li>
        <p>Pasess 11 as a parameter value to the square function (where an_integer is assigned 11 as a value), get back the return value 121</p>
      </li>
      <li>
        <p>Substitutes 121 for square, so that the expression now reads <c>2 * 121</c></p>
      </li>
      <li>
        <p>Assigns 242 to variable <c>square_result</c></p>
      </li>
    </ol>
  </p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question4_5_1">
    <statement>
      <p>What is wrong with the following function definition:</p>
      <program language="python">
        <input>
          def add_em(x, y, z):
              return x+y+z
              print('the answer is', x+y+z)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>You should never use a print statement in a function definition.</p>
        </statement>
        <feedback>
          <p>Although you should not mistake print for return, you may include print statements
            inside your functions.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>You should not have any statements in a function after the return statement. Once the
            function gets to the return statement it will immediately stop executing the function.</p>
        </statement>
        <feedback>
          <p>This is a very common mistake so be sure to watch out for it when you write your code!</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>You must calculate the value of x+y+z before you return it.</p>
        </statement>
        <feedback>
          <p>Python will automatically calculate the value x+y+z and then return it in the statement
            as it is written</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A function cannot return a number.</p>
        </statement>
        <feedback>
          <p>Functions can return any legal data, including (but not limited to) numbers, strings, booleans, etc.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>There is no type hinting.</p>
        </statement>
        <feedback>
          <p>Although type hinting is standard in Python, functions don't require it.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_5_2">
    <statement>
      <p>What will the following function return?</p>
      <program language="python">
        <input>
          def add_em(x: int, y: int, z: int):
              print(x+y+z)
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>The value None</p>
        </statement>
        <feedback>
          <p>We have accidentally used print where we mean return. Therefore, the function will
            return the value None by default. This is a VERY COMMON mistake so watch out! This
            mistake is also particularly difficult to find because when you run the function the
            output looks the same. It is not until you try to assign its value to a variable that
            you can notice a difference.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The value of x+y+z</p>
        </statement>
        <feedback>
          <p>Careful! This is a very common mistake. Here we have printed the value x+y+z but we
            have not returned it. To return a value we MUST use the return keyword.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The string 'x+y+z'</p>
        </statement>
        <feedback>
          <p>x+y+z calculates a number which represents the sum of the
            values x, y and z.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_5_3">
    <statement>
      <p>What will the following code output?</p>
      <program language="python">
        <input>
          def square(x: int) -&gt; int:
              y = x * x
              return y

          print(square(5) + square(5))
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>25</p>
        </statement>
        <feedback>
          <p>It squares 5 twice, and adds them together.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>50</p>
        </statement>
        <feedback>
          <p>The two return values are added together.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>25 + 25</p>
        </statement>
        <feedback>
          <p>The two results are substituted into the expression and then it is evaluated. The
            returned values are integers in this case, not strings.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_5_4">
    <statement>
      <p>What will the following code output?</p>
      <program language="python">
        <input>
          def square(x: int) -&gt; int:
              y = x * x
              return y

          print(square(square(2)))
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>8</p>
        </statement>
        <feedback>
          <p>It squares 2, yielding the value 4. But that doesn't mean the next value multiplies 2
            and 4.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>16</p>
        </statement>
        <feedback>
          <p>It squares 2, yielding the value 4. 4 is then passed as a value to square again,
            yeilding 16.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error: can't put a function invocation inside parentheses</p>
        </statement>
        <feedback>
          <p>This is a more complicated expression, but still valid. The expression square(2) is
            evaluated, and the return value 4 substitutes for square(2) in the expression.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <!--exercise label="question4_5_5">
    <statement>
      <p>What will the following code output?</p>
      <program language="python">
        <input>
          def cyu2(s1: str, s2: str):
            x = len(s1)
            y = len(s2)
            return x + y
            print(f"{s1} was {x} characters long.")
            print(f"{s2} was {y} characters long.")

          z = cyu2("This is a big string!", "This is a bigger string!")
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>47</p>
        </statement>
        <feedback>
          <p>cyu2 returns the value 47, but that's not what prints.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>The length of both strings</p>
        </statement>
        <feedback>
          <p>The function returns before the lengths can be printed.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Nothing</p>
        </statement>
        <feedback>
          <p>Since the code returns before the print statements, nothing is printed.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>This is a big string!This is a bigger string!</p>
        </statement>
        <feedback>
          <p>This code adds the lengths of each string, and doesn't concatenate them.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error</p>
        </statement>
        <feedback>
          <p>what do you think will cause an error.</p>
        </feedback>
      </choice>
    </choices>
  </exercise -->
  <exercise label="question4_5_6">
    <statement>
      <p>Which will print out first, square, g, or a number?</p>
      <program language="python">
        <input>
          def square(x: int) -&gt; int:
              print("square")
              return x*x

          def g(y: int) -&gt; int:
              print("g")
              return y + 3

          print(square(g(2)))
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>square</p>
        </statement>
        <feedback>
          <p>Before executing square, it has to figure out what value to pass in, so g is executed
            first</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>g</p>
        </statement>
        <feedback>
          <p>g has to be executed and return a value in order to know what paramater value to
            provide to x.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>a number</p>
        </statement>
        <feedback>
          <p>square and g both have to execute before the number is printed.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <!-- <exercise label="question11_4_7">
    <statement>
      <p>How many lines will the following code print?</p>
      <program language="python">
        <input>
          def show_me_numbers(list_of_ints):
          print(10)
          print("Next we'll accumulate the sum")
          accum = 0
          for num in list_of_ints:
          accum = accum + num
          return accum
          print("All done with accumulation!")

          show_me_numbers([4,2,3])
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>The function gets to a return statement after 2 lines are printed, so the third print
            statement will not run.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>Yes! Two printed lines, and then the function body execution reaches a return
            statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>None</p>
        </statement>
        <feedback>
          <p>The function returns an integer value! However, this code does not print out the result
            of the function invocation, so you can't see it (print is for people). The only lines
            you see printed are the ones that occur in the print statements before the return
            statement.</p>
        </feedback>
      </choice>
    </choices>
  </exercise> -->
  <exercise label="ac4_5_4">
    <statement>
      <p><term>8.</term> Write a function named <c>same</c> that takes a string as input, and simply
        returns that string.</p>
    </statement>
    <program xml:id="ac4_5_4_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(same('hello'), 'hello', "Testing the same function on input 'hello'.")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_5_5">
    <statement>
      <p><term>9.</term> Write a function called <c>same_thing</c> that returns the parameter,
        unchanged.</p>
    </statement>
    <program xml:id="ac4_5_5_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(same_thing(5), 5,"Testing the function same_thing with input 5")
                self.assertEqual(same_thing("Welcome"), "Welcome", "Testing the function same_thing with input 'Welcome'")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_5_6">
    <statement>
      <p><term>10.</term> Write a function called <c>subtract_three</c> that takes an integer or any
        number as input, and returns that number minus three.</p>
    </statement>
    <program xml:id="ac4_5_6_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(subtract_three(9), 6, "Testing the subtract_three function on input 9.")
                self.assertEqual(subtract_three(-5), -8, "Testing the subtract_three function on input -5.")
        
        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_5_7">
    <statement>
      <p><term>11.</term> Write a function called <c>change</c> that takes one number as its input
        and returns that number, plus 7.</p>
    </statement>
    <program xml:id="ac4_5_7_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(change(5), 12,"Testing the function change with input 5")
                self.assertEqual(change(-10), -3, "Testing the function change with input -10")
        
        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_5_8">
    <statement>
      <p><term>12.</term> Write a function named <c>intro</c> that takes a string as input. This
        string is intended to be a person's name and the output is a standardized greeting. For
        example, given the string <q>Becky</q> as input, the function should return: <q>Hello, my
        name is Becky and I love COMP 1701.</q></p>
    </statement>
    <program xml:id="ac4_5_8_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(intro("Mike"), "Hello, my name is Mike and I love COMP 1701.", "Testing the intro function on input 'Mike'.")

        myTests().main()
      </input>
    </program>
  </exercise>
  <exercise label="ac4_5_9">
    <statement>
      <p><term>13.</term> Write a function called <c>s_change</c> that takes one string as input and
        returns that string, concatenated with the string <q> for fun.</q>.</p>
    </statement>
    <program xml:id="ac4_5_9_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):
            def testOne(self):
                self.assertEqual(s_change("Coding"), "Coding for fun." ,"Testing the function s_change with input coding")
                self.assertEqual(s_change("We go to the beach"), "We go to the beach for fun." , "Testing the function s_change with input We go to the beach")

        myTests().main()
      </input>
    </program>
  </exercise>
  <!-- <exercise label="ac11_4_10">
    <statement>
      <p><term>14.</term> Write a function called <c>decision</c> that takes a string as input, and
        then checks the number of characters. If it has over 17 characters, return <q>This is a long
        string</q>, if it is shorter or has 17 characters, return <q>This is a short string</q>.</p>
    </statement>
    <program xml:id="ac11_4_10_editor" interactive="activecode" language="python">
      <input>

        =====

        from unittest.gui import TestCaseGui

        class myTests(TestCaseGui):

        def testOne(self):
        self.assertEqual(decision("Well hello dolly"), "This is a short string", "Testing the
        function decision with input 'Well hello dolly'")
        self.assertEqual(decision("In olden days a glimps of stocking was looked on a something
        shocking but heaven knows, anything goes"), "This is a long string", "Testing the function
        decision with input 'In olden days a glimps of stocking was looked on a something shocking
        but heaven knows, anything goes'")
        self.assertEqual(decision("how do you do sir"), "This is a short string", "Testing the
        function decision with input 'how do you do sir'")

        myTests().main()
      </input>
    </program>
  </exercise> -->
</section>
