<?xml version="1.0"?>
<section xml:id="functions_function-invocation">
  <title>Writing and Calling Basic Functions</title>

<p>The following set of rules <term>"The GK Golden Rules for Calling Functions"</term> will guide our understanding of functions. </p>
<p>
  <table>
    <tabular>
      <row>
        <cell>
          (1) In order to use a function we have to call it.
        </cell>
      </row>
      <row>
        <cell>
          (2) When we call a function, we always put a pair of parentheses after the name of the function.
        </cell>
      </row>
      <row>
        <cell>
          (3) The type and number of values (<em>arguments</em>)that belong in the parentheses must match the 
          rules for the function (<em>parameters</em>).
        </cell>
      </row>
      <row>
        <cell>
          (4) If the function returns a value, we must capture it into a variable with an assignment statement (or
           use the value in some other way, like print it).
        </cell>
      </row>
    </tabular>
  </table>
 </p>
  <p>Rule #1 seems obvious, but it's a good starting place for examining a user-defined function.</p>
  <p><term>(1) In order to use a function we have to call it.</term></p>  

  <p>The code below contains a function called "say_hello" that will display two lines of text to the screen. </p>
<program xml:id="ac4_3_1" interactive="activecode" language="python" label="ac2_4_1">
    <input>
      def say_hello():
        print("Hello, world")
        print("Have a great day!")



    </input>
  </program>

  <p>When you run this code, it appears that <em>nothing happens</em>! The function "say_hello" is defined, but it is not <em>called</em>. Just as print() or 
  input() are defined behind the scenes for all Python programs, they don't <em>do their job</em> unless they are called. That is, defining a function does not 
  make it run. To execute the function, we need to <term>call</term> or <term>invoke</term> it.</p> 
  <p>Make these changes to the code above 
    <ol>
      <li>Type the instruction <c>say_hello()</c> on line 4 and you can see the function run and generate output.</li>
      <li>Insert additional calls to say_hello on lines 5, 6, etc. <em> Once we've defined a function, we can call 
        it as often as we like and its statements will be executed each time we call it.</em></li>
      </ol>
  </p> 

  <note><p>A novice programmer will spend their time and energy developing an algorithm and writing the necessary code to 
    implement the algorithm in a function, as they should. Subsequently, the programmer will debug their code until the Python interpreter
   makes no complaints. Then, when they run the code, nothing happens. Remember <term>GK Golden Rule #1</term> ... call your function!
  </p></note>

  <p>The name of the function above is "say_hello" but we must include parentheses <c>()</c> after the name. The parentheses are necessary because, 
  without them, Python will try to reference a variable with this name, not a function. </p>
  <p><term>(2) When we call a function, we always put a pair of parentheses after the name of the function.</term></p>
  <p>Once you get in the habit of writing parentheses, this rule will seem trivial.</p>
  
  <p>This section and the previous discusses <em>calling</em> functions. We have covered calling functions that are built into Python, 
    such as <c>type()</c> and <c>input()</c>. This section focuses on calling functions that are written by a programmer (<em>you</em> are the
    programmer!). In the next section, we'll take an intial look at the syntax (grammer rules) for writing a function from scratch.
  </p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question4_3_1">
    <statement>
      <p>What is a function in Python?</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A named sequence of statements.</p>
        </statement>
        <feedback>
          <p>Yes, a function is a named sequence of statements.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Any sequence of statements.</p>
        </statement>
        <feedback>
          <p>While functions contain sequences of statements, not all sequences of statements are
            considered functions.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A mathematical expression that calculates a value.</p>
        </statement>
        <feedback>
          <p>While some functions do calculate values, the python idea of a function is slightly
            different from the mathematical idea of a function in that not all functions calculate
            values. Consider, for example, the turtle functions in this section. They made the
            turtle draw a specific shape, rather than calculating a value.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A statement of the form x = 5 + 4.</p>
        </statement>
        <feedback>
          <p>This statement is called an assignment statement. It assigns the value on the right
            (9), to the name on the left (x).</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_3_2">
    <statement>
      <p>What is one main purpose of a function?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>To improve the speed of execution</p>
        </statement>
        <feedback>
          <p>Functions have little effect on how fast the program runs.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>To help the programmer organize programs into chunks that match how they think about
            the solution to the problem.</p>
        </statement>
        <feedback>
          <p>While functions are not required, they help the programmer better think about the
            solution by organizing pieces of the solution into logical chunks that can be reused.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>All Python programs must be written using functions</p>
        </statement>
        <feedback>
          <p>In the first several chapters, you have seen many examples of Python programs written
            without the use of functions. While writing and using functions is desirable and
            essential for good programming style as your programs get longer, it is not required.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>To calculate values.</p>
        </statement>
        <feedback>
          <p>Not all functions calculate values.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_3_3">
    <statement>
      <p>How many lines will be output by executing this code?</p>
      <program language="python">
        <input>
          def hello() -&gt; None:
            print("Hello")
            print("Glad to meet you")
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>The code only defines the function. Nothing prints until the function is called.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>Check again.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
          <p>When the function is invoked, it will print two lines, but it has only been defined,
            not invoked.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="question4_3_4">
    <statement>
      <p>How many lines will be output by executing this code?</p>
      <program language="python">
        <input>
          def hello() -&gt; None:
            print("Hello")
            print("Glad to meet you")

          hello()
          print("It works")
          hello()
          hello()
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>0</p>
        </statement>
        <feedback>
          <p>Here the the function is invoked and there is also a separate print statement.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>1</p>
        </statement>
        <feedback>
          <p>There is only one print statement outside the funciton, but the invocations of hello
            also cause lines to print.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
          <p>There are three print statements, but the function is invoked more than once.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
          <p>Each time the function is invoked, it will print two lines, not one.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>7</p>
        </statement>
        <feedback>
          <p>Three invocations generate two lines each, plus the line "It works".</p>
        </feedback>
      </choice>
    </choices>
  </exercise>

</section>
