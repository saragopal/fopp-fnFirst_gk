<?xml version="1.0"?>
<section xml:id="functions_introduction-to-functions">
  <title>Introduction to Functions</title>
  <p>Functions are one of the most important structures of any modern programming language. A <term>function</term> is a block of code that 
    performs a specific task. The name of a function is the label given to the chunk of code. To request that the block of code is executed,
    we "call" or "invoke" the function by putting its name in our code. </p>
    
    <p>A <term>function</term> is a chunk of code that performs a specific operation. It is usually a
    meaningful and self-contained part of a larger problem, such as calculating a student's GPA
    in a learning system or responding to the jump action in a video game. Once a function has been
    defined and you are satisfied that it does what it is supposed to do, you and other programmers can use it in the context of larger tasks without
     concern for how it works.</p>
  <p>In computer programming, this breaking down of a task or problem into smaller, solveable, sub-functions, is called <term>decomposition</term>
  and the idea of hiding the complexity of the sub-steps of the algorithm in a function is called <term>abstraction</term>.
  Learning to use and apply these problem-solving techniques is crucial to the successful implementation of any
    program of more than 50 or so lines (and plenty of smaller ones too). For example, the programmer who coded the Instagram landing page
    decomposed it into functions that:</p>
  <p>
    <ul>
      <li>
        <p>display the header bar</p>
      </li>
      <li>
        <p>display your friends' posts</p>
      </li>
      <li>
        <p>display your friends' stories</p>
      </li>
      <li>
        <p>display the ad at the bottom of the screen recommending you use the app</p>
      </li>
    </ul>
  </p>
  <p>And each of those is made up of functions as well. For example, the function that displays your
    friends' posts is a <c>for</c> loop that calls a 'sub'-function to display a single post, which in turn calls 'sub-sub'-functions to:</p>
  <p>
    <ul>
      <li>
        <p>display the photo and name of the person posting the story</p>
      </li>
      <li>
        <p>display the photo itself</p>
      </li>
      <li>
        <p>display other users' <q>likes</q> to the story</p>
      </li>
      <li>
        <p>display the comments on the story</p>
      </li>
      <li>
        <p>etc.</p>
      </li>
     </ul>
  </p>
  <p>In this chapter you will learn about named functions, i.e. functions that are referred to by a name
    when you want to execute them.</p>
  <subsection xml:id="functions_introduction-to-functions_topics">
    <title>Topics</title>
    <p>
      <ul>
        <li>
          <p>The purpose of functions as a means of abstraction</p>
        </li>
        <li>
          <p>The syntax and parts of functions</p>
          <ul>
            <li>Function headers</li>
            <li>Parameters and arguments</li>
            <li>Body and return statement</li>
            </ul>
        </li>
        <li><p>Local and global scope and the flow of execution</p></li>
        <!-- <li><p>Side effects</p></li> -->
      </ul>
    </p>
  </subsection>
  <subsection xml:id="functions_introduction-to-functions_learning-objectives">
    <title>Learning Objectives</title>
    <p>At the end of this chapter, you should be able to:</p>
    <p>
      <ul>
        <li>
          <p>identify formal parameters and parameter values in a code sample</p>
        </li>
        <li>
          <p>predict the return value of a function given sample parameter values (aka arguments)</p>
        </li>
        <li>
          <p>define functions with appropriate names for formal parameter</p>
        </li>
        <li>
          <p>avoid the use of global variables in function definitions by creating formal parameters
            for all values that are needed</p>
        </li>
        <!-- <li>
          <p>identify whether a function has any side effects</p>
        </li> -->
      </ul>
    </p>
  </subsection>
</section>
