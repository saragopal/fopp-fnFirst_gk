<?xml version="1.0"?>
<section xml:id="functions_functions-we-know">
  <title>Functions We Know</title>
  <p>Functions are one of the most important structures of any modern programming language. A <term>function</term> is a block of code that 
    performs a specific task. The name of a function is the label given to the chunk of code. To request that the block of code is executed,
    we "call" or "invoke" the function by putting its name in our code. </p>
    <p>Lucky for us, there are many functions already written in Python that we can use. We invoke them (call them) 
      with their name and a pair of parentheses. There is no need to understand the code that does "the magic". We just 
      have to be sure we know what the function <em>does</em>.
    </p>
    <p>Here are some of the functions that we've been using:
    <table>
    <tabular>
      <row>
        <cell>
          <c>print()</c>
        </cell>
        <cell>
          <c>input()</c>
        </cell>
        <cell>
          <c>type()</c>
        </cell>
      </row>
      <row>
        <cell>
          <c>int()</c>
        </cell>
        <cell>
          <c>float()</c>
        </cell>
        <cell>
          <c>str()</c>
        </cell>
      </row>
    </tabular>
  </table>
    </p>

    <p>Consider <c>print()</c> and what we know about this function &#8212;
    <ul>
        <li>When we <term>call</term> this function, we put zero, one, or more values in the parentheses after its name. Multiple 
            values are separated by a comma.</li> 
        <li>The <term>behavior</term> of this function is to display all the values in the parentheses to the screen. Values
        are separated by a white-space and we get a newline at the end of the displayed text. </li>
        <li>This function does not <term>return</term> anything <em>interesting</em>.</li>
    </ul>
    
        <note><p> What <em>does</em> the function <c>print()</c> return? How would you find out? </p></note>            
    </p>
    
    
    <p>Consider <c>int()</c> and how we use it &#8212;
    <ul>
        <li>When we <term>call</term> this function, we must put exactly one value in the parentheses.</li> 
        <li>The <term>behavior</term> of this function is to convert the value in the parentheses into an ingeter. The
        rules for value it receives and the integer it generates have some restrictions. </li>
        <li>This function <term>returns</term> an integer. We have to use an assignment statement to keep the integer in a variable (or we
             can just print it to the screen).</li>
    </ul>
    </p>
    <p>
    By comparing what we know about using <c>print()</c> and using <c>int()</c>, we may start to see a pattern. Namely, to use a function, we 
    have to know what it requires as <em>input</em>, what it generates (<em>output</em>), and what it <em>does</em>. For functions built into Python, we do not have
     to worry about <em>how</em> they work. We do not need to know (or care) if the code that implements the function is 10 lines or 10,000 lines. (This is
      why we are are grateful for built-in functions!)
    </p>
    <p>However, in addition to using functions that are built into Python, we can write our own. <em>Writing our own functions</em> is one of the
      most powerful tools of programming. If we want to write some code to perform a task, we write it once use it over and over (and over). The rest of this chapter is
       about <term>writing our own functions</term>.
    </p>
</section>
