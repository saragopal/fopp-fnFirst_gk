<?xml version="1.0"?>
<section xml:id="files_alternative-file-reading-methods">
  <title>Alternative File Reading Methods</title>
  <p>Once you have a file <q>object</q>, the thing returned by the open function, Python provides three methods to read data
            from that object. The <c>read()</c> method returns the entire contents of the file as a single string (or just some
            characters) if you provide a number as an input parameter. The <c>readlines</c> method returns the entire contents of
            the entire file as a list of strings, where each item in the list is one line of the file. The <c>readline</c>
            method reads one line from the file and returns it as a string. The strings returned by <c>readlines</c> or
            <c>readline</c> will contain the newline character at the end. The following table summarizes these
            methods and the following session shows them in action.</p>
  <table xml:id="files_files_filemethods2a">
    <tabular>
      <col />
      <col />
      <col width="50%"/>
      <row header="yes">
        <cell>
          <term>Method Name</term>
        </cell>
        <cell>
          <term>Use</term>
        </cell>
        <cell>
          <term>Explanation</term>
        </cell>
      </row>
      <!-- <row>
        <cell>
          <c>write</c>
        </cell>
        <cell>
          <c>filevar.write(astring)</c>
        </cell>
        <cell>
                            Add a string to the end of the file.
                                <c>filevar</c> must refer to a file that has
                                been  opened for writing.
                        </cell>
      </row> -->
      <row bottom="minor">
        <cell>
          <c>read(n)</c>
        </cell>
        <cell>
          <c>filevar.read()</c>
        </cell>
        <cell>
        <p>
                            Read and return a string of <c>n</c>
                                characters, or the entire file as a
                                single string if  <c>n</c> is not provided.
                        </p></cell>
      </row>
      <row bottom="minor">
        <cell>
          <c>readline()</c>
        </cell>
        <cell>
          <c>filevar.readline()</c>
        </cell>
        <cell><p>
                            Read and return the next line of the file with
                                all text up to and including the
                                newline character.
                       </p></cell>
      </row>
      <row>
        <cell>
          <c>readlines()</c>
        </cell>
        <cell>
          <c>filevar.readlines()</c>
        </cell>
        <cell><p>
                            Returns a list of strings, each
                                representing a single line of the file.
                       </p></cell>
      </row>
    </tabular>
  </table>
  <p>In this course, we will generally either iterate through the lines returned by <c>readlines()</c> with a for loop,
            or use <c>read()</c> to get all of the contents as a single string.</p>
  <p>In other programming languages, where they don't have the convenient for loop method of going through the lines
            of the file one by one, they use a different pattern which requires a different kind of loop, the <c>while</c> loop.
            Fortunately, you don't need to learn this other pattern, and we will put off consideration of <c>while</c> loops
            until later in this course. We don't need them for handling data from files.</p>
  <note>
    <p>A common error that novice programmers make is not realizing that all these ways of reading the file contents,
                <term>use up the file</term>. After you call readlines(), if you call it again you'll get an empty list.</p>
  </note>
  <p>
    <term>Check your Understanding</term>
  </p>
  <exercise label="ac11_3_1">
      <p>
        <ol marker="1">
          <li>
            <p>Using the file <c>school_prompt2.txt</c> (shown below), find the number of characters in the file and assign that value to the variable <c>num_char</c>.</p>
          </li>
        </ol>
      </p>
    <program xml:id="ac11_3_1_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(num_char, 537, "Testing that num_char has the correct value.")

myTests().main()
        </input>
    </program>
  </exercise>

  <exercise label="ac11_3_2">
      <p>
        <ol marker="1">
          <li>
            <p>Find the number of lines in the file <c>travel_plans2.txt</c> (shown below), and assign it to the variable <c>num_lines</c>.</p>
          </li>
        </ol>
      </p>
    <program xml:id="ac11_3_2_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testTwo(self):
      self.assertEqual(num_lines, 11, "Testing that num_lines is assigned to correct value.")

myTests().main()
        </input>
    </program>
  </exercise>
  
  <!-- <exercise label="ac11_3_3">
      <p>
        <ol marker="1">
          <li>
            <p>Create a string called <c>first_forty</c> that is comprised of the first 40 characters of <c>emotion_words2.txt</c>.</p>
          </li>
        </ol>
      </p>
    <program xml:id="ac11_3_3_editor" interactive="activecode" language="python">
      <input>

=====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

   def testOne(self):
      self.assertEqual(first_forty, 'Sad upset blue down melancholy somber bi', "Testing that first_forty was created correctly.")
myTests().main()
        </input>
    </program>
  </exercise> -->

  <datafile label="school_prompt2.txt" filename="school_prompt2.txt">
    <pre>
Writing essays for school can be difficult but
many students find that by researching their topic that they
have more to say and are better informed. Here are the university
we require many undergraduate students to take a first year writing requirement
so that they can
have a solid foundation for their writing skills. This comes
in handy for many students.
Different schools have different requirements, but everyone uses
writing at some point in their academic career, be it essays, research papers,
technical write ups, or scripts.
    </pre>
  </datafile>

  <datafile label="travel_plans2.txt" filename="travel_plans2.txt">>
  <pre>
This summer I will be travelling.
I will go to...
Italy: Rome
Greece: Athens
England: London, Manchester
France: Paris, Nice, Lyon
Spain: Madrid, Barcelona, Granada
Austria: Vienna
I will probably not even want to come back!
However, I wonder how I will get by with all the different languages.
I only know English!
  </pre>
  </datafile>

<!-- <datafile label="emotion_words2.txt" filename="emotion_words2.txt">
<pre>
Sad upset blue down melancholy somber bitter troubled
Angry mad enraged irate irritable wrathful outraged infuriated
Happy cheerful content elated joyous delighted lively glad
Confused disoriented puzzled perplexed dazed befuddled
Excited eager thrilled delighted
Scared afraid fearful panicked terrified petrified startled
Nervous anxious jittery jumpy tense uneasy apprehensive
</pre>
</datafile> -->

</section>
