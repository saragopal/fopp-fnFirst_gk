<?xml version="1.0"?>
<section xml:id="conditionals_short-circuit-evaluation">
  <title>Short-Circuit Evaluation</title>
  
  <subsection xml:id="conditionals_smart-evaluation">
    <title>Smart Evaluation</title>
    <p>Python is <q>smart</q> about the way it evaluates expressions using boolean operators.
      Consider the following example:</p>
    <pre>answer = input('Continue?')
if answer == 'Y' or answer == 'y':
   print('Continuing!')</pre>
    <p>There are two operands for the <c>or</c> operator here: <c>answer == 'Y'</c> and <c>'answer == 'y'</c>. Python evaluates from left to right, and if the first operand for <c>or</c>
      evaluates to <c>True</c>, Python doesn't bother evaluating the second operand, because it knows the result must be <c>True</c> (recall that if either operand for <c>or</c> is <c>True</c>,
      the result is <c>True</c>). So, if the user enters <c>Y</c>, Python first evaluates <c>answer == 'Y'</c>, determines that it is <c>True</c>, and doesn't bother to check to see if <c>answer == 'y'</c> is <c>True</c>; it just concludes that the entire condition is <c>True</c> and executes the print statement.</p>
    <p>In a similar fashion, with the <c>and</c> operator, if the first operand evaluates to <c>False</c>, Python doesn't check the second operand's value, because it can conclude that the
      result must be <c>False</c>.</p>
    <p>This behavior, in which Python in some cases skips the evaluation of the second operand to <c>and</c> and <c>or</c>, is called <term>short-circuit boolean evaluation</term>. You don't have
      to do anything to make Python do this; it's the way Python works. It saves a little processing
      time. And, as a special bonus, you can take advantage of Python's short-circuiting behavior to
      shorten your code. Consider the following example:</p>
    <program xml:id="ac5_3_3" interactive="activecode" language="python">
      <input>
        def check_average_weight() -&gt; None:
            total_weight = int(input('Enter total weight of luggage:'))
            num_pieces = int(input('Number of pieces of luggage?'))

            if total_weight / num_pieces &gt; 50:
              print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')

            print('Luggage check complete.')
        
        check_average_weight()
      </input>
    </program>
    <p>This code checks to see if the average weight of a given number of pieces of luggage is
      greater than 50 pounds. However, there is a potential crash situation here. If the user enters <c>0</c> for <c>num_pieces</c>, the program will crash with a divide by zero error. Try it out to
      see it happen.</p>
    <p>To prevent the crash, you might add an extra if statement to check for zero:</p>
    <pre>if num_pieces != 0:
   if total_weight / num_pieces &gt; 50:
      print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')</pre>
    <p>Now, the division will not occur if <c>num_pieces</c> is zero, and a potential runtime crash
      has been averted. Good job!</p>
    <p>We can use short-circuit evaluation to shorten this example to a single <c>if</c> statement. Anytime
      you have two nested <c>if</c> statements as in the example above, you can combine them into a
      single <c>if</c> statement by joining the conditions using the <c>and</c> operator. Consider
      the version below, and think about why this <c>if</c> statement is equivalent in its behavior
      to the previous version with two nested <c>if</c> statements:</p>
    <program xml:id="ac5_3_4" interactive="activecode" language="python">
      <input>
        def check_average_weight() -&gt; None:
            total_weight = int(input('Enter total weight of luggage:'))
            num_pieces = int(input('Number of pieces of luggage?'))

            if num_pieces != 0 and total_weight / num_pieces &gt; 50:
              print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')

            print('Luggage check complete.')
        
        check_average_weight()
      </input>
    </program>
    <p>But wait a minute: is this code safe? Try running the program and entering the value <c>500</c>
      for <c>total_weight</c> and the value <c>5</c> for num_pieces. Then, try it again using the
      value <c>0</c> for num_pieces. There should be no crash.</p>
    <p>Next, try altering the code and reversing the order of the <c>if</c> conditions:</p>
    <pre>if total_weight / num_pieces &gt; 50 and num_pieces != 0:
   print('Average weight is greater than 50 pounds -&gt; $100 surcharge.')</pre>
    <p>Run the program again, performing the same two tests. This time, you should observe a crash
      when you enter <c>0</c> for num_pieces. Can you analyze why the first version did not crash,
      but the second one does?</p>
    <p>In the second version, when evaluating left-to-right, the division by zero occurs before
      Python evaluates the comparison <c>num_pieces != 0</c>. When joining two <c>if</c> statements
      into a single <c>if</c> statement, you must be sure to put the condition from the first <c>if</c>
      statement on the left-hand side of the <c>and</c> operator, and the other condition on the
      right-hand side, in order to get the same effect.</p>
    <p>To summarize this discussion on smart evaluation, keep in mind that when you are performing
      potentially dangerous operations in an <c>if</c> statement <!-- or <c>while</c> loop--> using boolean logic with <c>and</c>
      or <c>or</c>, order matters!</p>
  </subsection>

  <!-- 
    THESE EXERCISES REMOVED FOR NOW SINCE THEY USE SEQUENCES
  <p>
    <term>Check your understanding</term>
  </p>

  <exercise label="question5_3_2">
      <statement>
        <p>Which of the following may result in a crash at runtime if the user presses Enter without
          typing a response?</p>
        <p>Option A)</p>
        <pre>yesno = input('Enter Yes or No:')
if yesno[0] == 'Y' and len(yesno) &gt; 0:
   print('Yes!')</pre>
        <p>Option B)</p>
        <pre>yesno = input('Enter Yes or No:')
if len(yesno) &gt; 0 and yesno[0] == 'Y':
   print('Yes!')</pre>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>Option A</p>
          </statement>
          <feedback>
            <p>Correct! The comparison yesno[0] == 'Y' will crash if yesno is an empty string.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>Option B</p>
          </statement>
          <feedback>
            <p>Incorrect. If len(yesno) &gt; 0 is False, the potentially unsafe comparison yesno[0]
              == 'Y' will not be evaluated.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <exercise label="question5_3_3">
      <statement>
        <p>Consider the following fragment containing a nested <c>if</c> statement to prevent a
          crash in the event the user enters an empty response for <c>yesno</c>:</p>
        <pre>yesno = input('Enter Yes or No:')
if len(yesno) &gt; 0:
   if yesno[0] == 'Y':
      print('Yes!')</pre>
        <p>Which of the following is the correct way to combine the nested <c>if</c> into a single <c>
          if</c> statement that executes identically to the nested <c>if</c> statements?</p>
        <p>Option A)</p>
        <pre>if yesno[0] == 'Y' and len(yesno) &gt; 0:
   print('Yes!')</pre>
        <p>Option B)</p>
        <pre>if len(yesno) &gt; 0 and yesno[0] == 'Y':
   print('Yes!')</pre>
        <p>Option C)</p>
        <pre>if yesno[0] == 'Y' or len(yesno) &gt; 0:
   print('Yes!')</pre>
        <p>Option D)</p>
        <pre>if len(yesno) &gt; 0 or yesno[0] == 'Y':
   print('Yes!')</pre>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>Option A</p>
          </statement>
          <feedback>
            <p>Incorrect. The comparison yesno[0] == 'Y' will crash if yesno is an empty string.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>Option B</p>
          </statement>
          <feedback>
            <p>Correct! Use the and operator to join nested if statements into a single statement,
              with the first if condition on the left-hand side.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>Option C</p>
          </statement>
          <feedback>
            <p>Incorrect. The comparison yesno[0] == 'Y' will crash if yesno is an empty string.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>Option D</p>
          </statement>
          <feedback>
            <p>Incorrect. The comparison yesno[0] == 'Y' will crash if yesno is an empty string.</p>
          </feedback>
        </choice>
      </choices>
    </exercise> -->

</section>
