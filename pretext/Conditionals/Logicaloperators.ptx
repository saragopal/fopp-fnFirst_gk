<?xml version="1.0"?>
<section xml:id="conditionals_logical-operators">
  <title>Logical operators</title>
  <p>There are three <term>logical operators</term>: <c>and</c>, <c>or</c>, and <c>not</c>. All
    three operators take boolean operands and produce boolean values. The semantics (meaning) of
    these operators is similar to their meaning in English:</p>
  <p>
    <ul>
      <li>
        <p><c>x and y</c> is <c>True</c> if both <c>x</c> and <c>y</c> are <c>True</c>. Otherwise, <c>and</c> produces <c>False</c>.</p>
      </li>
      <li>
        <p><c>x or y</c> yields <c>True</c> if either <c>x</c> or <c>y</c> is <c>True</c>. Only if both operands are <c>False</c> does <c>or</c> yield <c>False</c>.</p>
      </li>
      <li>
        <p><c>not x</c> yields <c>False</c> if <c>x</c> is <c>True</c>, and vice versa.</p>
      </li>
    </ul>
  </p>
  <p>Look at the following example. See if you can predict the output. Then, Run to see if your
    predictions were
    correct:</p>
  <program xml:id="ac5_3_1" interactive="activecode" language="python">
    <input>
      x = True
      y = False
      print(x or y)
      print(x and y)
      print(not x)
    </input>
  </program>
  <p>Although you can use boolean operators with simple boolean literals or variables as in the
    above
    example, they are often combined with the comparison operators, as in this example. Again,
    before you
    run this, see if you can predict the outcome:</p>
  <program xml:id="ac5_3_2" interactive="activecode" language="python">
    <input>
      x = 5
      print(x &gt; 0 and x &lt; 10)

      n = 25
      print(n % 2 == 0 or n % 3 == 0)
    </input>
  </program>
  <p>The expression <c>x &gt; 0 and x &lt; 10</c> is <c>True</c> only if <c>x</c> is greater than 0 <em>
    and</em> at the same time, x is less than 10. In other words, this expression is <c>True</c> if
    x is between 0 and 10, not including the endpoints.</p>
  <note>
    <title>Common Mistake!</title>
    <p>There is a very common mistake that occurs when programmers try to write boolean expressions.
      For example, what if we have a variable <c>number</c> and we want to check to see if its value
      is 5 or 6. In words we might say: <q>number
        equal to 5 or 6</q>. However, if we translate this into Python, <c>number == 5 or 6</c>, it
      will not yield correct results. The <c>or</c> operator must have a complete equality check on
      both sides. The correct way to write this is <c>number == 5 or number == 6</c>. Remember that
      both operands of <c>or</c> must be booleans in order to yield proper results.</p>
  </note>
    <p>
      <term>Check your understanding</term>
    </p>
    <exercise label="question5_3_1">
      <statement>
        <p>What is the correct Python expression for checking to see if a number stored in a
          variable x is between 0 and 5.</p>
      </statement>
      <choices>
        <choice>
          <statement>
            <p>x &gt; 0 and &lt; 5</p>
          </statement>
          <feedback>
            <p>Each comparison must be between exactly two values. In this case the right-hand
              expression &lt; 5 lacks a value on its left.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>0 &lt; x &lt; 5</p>
          </statement>
          <feedback>
            <p>Although most other programming languages do not allow this syntax, in Python, this
              syntax is allowed. Even though it is possible to use this format, you should not use
              it all the time. Instead, make multiple comparisons by using and or or.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>x &gt; 0 or x &lt; 5</p>
          </statement>
          <feedback>
            <p>Although this is legal Python syntax, the expression is incorrect. It will evaluate
              to true for all numbers that are either greater than 0 or less than 5. Because all
              numbers are either greater than 0 or less than 5, this expression will always be True.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement>
            <p>x &gt; 0 and x &lt; 5</p>
          </statement>
          <feedback>
            <p>Yes, with an ``and`` keyword both expressions must be true so the number must be
              greater than 0 an less than 5 for this expression to be true.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
</section>
