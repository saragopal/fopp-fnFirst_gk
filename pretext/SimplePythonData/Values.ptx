<?xml version="1.0"?>
<section xml:id="simple-python-data_values-and-data-types">
  <title>Printing Values</title>
  <p>The following program provides examples of many concepts to explore. On one hand, when you run it, it's likely
    that the outcome is what you would expect (and that's great). However, the program also gives us a
  starting place to define some important vocabulary and start recognizing how much specificity that 
is required in computer science. </p>
  <program xml:id="ac2_2_1" interactive="activecode" language="python">
    <input>
      print(41)
      print(3.299)
      print("Hello, World!")
    </input>
  </program>
  <p>In the program above, there are three values (<b>3.299</b>, <b>"Hello World"</b>, and <b>41</b>).
     A <term>value</term> is one of the fundamental things &#x2014; like a word or a number &#x2014;
    that a program manipulates. Each of the three values in this first program are a different <term>data type</term>.
    <ul>
      <li>The value 41 is an <term>integer</term>. It represents a whole number, either positive or negative (just as defined in your math classes).</li>
      <li>The value 3.299 is a <term>floating point</term> number. Usually, we call this a "<term>float</term>". This is a number with a decimal point. It is the 
      computer science term for a <i>rational number</i> from your math classes.</li>
      <li>The value "Hello, world" is a <term>string</term> or <term>string literal</term>.This is a "string of characters" that are not evaluated to anything. Usually,
      strings are letters, but they can also include characters or numerals.</li>
    </ul>
    There is more to know about each of these data types. At this point, you should be able to recognize 
    that there is a distinction (difference) among <em>data types</em>.</p>
    <p>For emphasis:
      <ul>
        <li>
          <c>300</c> is an integer.
        </li>
        <li>
          <c>300.0</c> is a float.
        </li>
        <li>
          <c>"300"</c> is a string.
        </li>
      </ul>
    </p> 
<p>The distinction among data types becomes more and more important as you learn more and more about programming
  and computer science more deeply. Data of different types is stored differently inside the computer. More immediately,
  however, different operations (and functions) behave differently with different data types. For example, what should we expect from
  <c>7 &#247; 2</c>? This is discussed in the next section.
</p>

<p><term>Using print()</term></p>
<p>The function <c>print()</c> is how we can view data on the screen. In the examples above, we have one <em>value</em> displayed on each line.
   However, we can display <em>many</em> values in one print statement by including a comma <c>,</c> between the values.
</p>
  <program xml:id="ac2_2_2" interactive="activecode" language="python">
    <input>
      print("Jason is", 27, "years old")
      print()
      print("The sum of 11 and 45.7 is", 11+45.7)
    </input>
  </program>
  <p>What to notice:
    <ul>
      <li>In the first <c>print()</c> statement, there are three values being displayed. They are separated by commas. The first is 
        a <term>string</term>; The second is an <term>integer</term>; The third is a <term>string</term>.        
      </li>
      <li>The second <c>print()</c> statement had empty parenthesis! This gives us an empty line of text.
      </li>
      <li>In the third <c>print()</c> statement, there are two values being displayed and they are separated by commas. The first is 
        a <term>string</term>; The second is a <term>float</term>, but notice that is the result from <c>11 + 45.7</c> being <em>evaluated</em>.
      </li>
    </ul>
    Try changing the code above. See what "works" and what doesn't. Observe the results/output as you make changes. You can learn a lot 
    by <term>trying things on your own</term>. Experimenting and making conclusions are powerful ways to learn!
  </p>
  <p>Summary of what we need to know about <code>print()</code>:
    <ol>
      <li>After the word <term>print</term> we put a pair of parenthesis <c>()</c>. Inside the parenthesis are the values (or single value) that we want displayed.
      </li>
      <li>Each comma <c>,</c> that we use to separate values in our print() statement <em>gives us a white-space for "free"</em>. *
      </li>
      <li>After displaying any and all values at the end of a print() function call, the output goes to the next line "newline". *
      </li>
    </ol>
    *NOTE: The automatic white-space or newline that we "get for free" <em>can</em> be overridden; How to do so is covered later.
  </p> 

  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question2_2_1">
    <statement>
      <p>What appears in the output window when the following statement executes?</p>
      <program language="python">
        <input>
          print("Hello World!")
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Nothing is printed. It generates a runtime error.</p>
        </statement>
        <feedback>
          <p>"Hello World!" has a printed representation, so there will not be an error.</p>
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>"Hello World!"</p>
        </statement>
        <feedback>
          <p>The literal in the program includes the quote marks, but the printed representation
            omits them.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Hello World!</p>
        </statement>
        <feedback>
          <p>The printed representation omits the quote marks that are included in the string
            literal.</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
