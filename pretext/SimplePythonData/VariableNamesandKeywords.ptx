<?xml version="1.0"?>
<section xml:id="simple-python-data_variable-names-and-keywords">
  <title>Variable Names and Keywords</title>
  <p>You may choose your own<term>Variable names</term>. They should describe their purpose or
    what they represent. The names you choose should help you (and other people) understand how they 
    are being used in your program. Variable names can be arbitrarily long, particularly if you choose to 
    string a few words together. </p>
  <p> There only a few <term>rules</term> for naming variables &#8212;
    <ol>
      <li>The first character must be a (lower-case) letter.</li>
      <li>You may use any letter, digit, or the underscore <c>_</c> in your variable names 
        (but not the first character-see #1 above)</li>
      <li>You may not use any <em>reserved words</em> as variable names. (See the table below)   </li>
    </ol>
    In short, they can contain both letters and digits, but they have to begin with a letter (or an underscore).
  </p>
  <p> There are also a few <term>conventions</term> to follow &#8212;
    <ol>
      <li>The first character is a lower-case letter. Python will not <em>break</em> if you 
          use an upper-case letter, but it signifies something to advanced programmers that you do not intend.</li>
      <li>You may string words together to make a helpful variable name.
           <ul>
            <li><c>momAge</c> This is called "camel case" because the capital letters create humps (like on a camel).</li>
            <li><c>mom_age</c> This is called "snake case" because the words are connected like a snake.</li>
            <li>Warning - Variable names can never contain spaces.</li>
           </ul>
      </li>
      <li>Single letter variable names are generally not a good idea.</li>
    </ol>
  </p>
  
  <note><p>Although it is legal to start a variable name with an uppercase letters, by convention we don't. Beginning a variable 
    name with capital letter implies something about data types that will be introduced in a later chapter. </p>
  </note>
  <note> <p>There are some situations in which names beginning with an underscore have special meaning, so a safe rule for
    beginners is to start all names with a lower-case letter.</p>
  </note>
  <p>If you give a variable an illegal name, you get a syntax error. In the code below, each
    of the variable names is illegal.</p>
  <pre>76trombones = "big parade"
more$ = 1000000
class = "Computer Science 101"</pre>
  <p><c>76trombones</c> is illegal because it does not begin with a letter. <c>more$</c> is illegal
    because it contains an illegal character, the dollar sign. But what's wrong with <c>class</c>?</p>
  <p>It turns out that <c>class</c> is one of the Python <term>keywords</term>. Keywords define the
    language's syntax rules and structure, and they cannot be used as variable names. Python has
    thirty-something keywords (and every now and again improvements to Python introduce or eliminate
    one or two):</p>
  <table>
    <tabular>
      <row>
        <cell>
          and
        </cell>
        <cell>
          as
        </cell>
        <cell>
          assert
        </cell>
        <cell>
          break
        </cell>
        <cell>
          class
        </cell>
        <cell>
          continue
        </cell>
      </row>
      <row>
        <cell>
          def
        </cell>
        <cell>
          del
        </cell>
        <cell>
          elif
        </cell>
        <cell>
          else
        </cell>
        <cell>
          except
        </cell>
        <cell>
          exec
        </cell>
      </row>
      <row>
        <cell>
          finally
        </cell>
        <cell>
          for
        </cell>
        <cell>
          from
        </cell>
        <cell>
          global
        </cell>
        <cell>
          if
        </cell>
        <cell>
          import
        </cell>
      </row>
      <row>
        <cell>
          in
        </cell>
        <cell>
          is
        </cell>
        <cell>
          lambda
        </cell>
        <cell>
          nonlocal
        </cell>
        <cell>
          not
        </cell>
        <cell>
          or
        </cell>
      </row>
      <row>
        <cell>
          pass
        </cell>
        <cell>
          raise
        </cell>
        <cell>
          return
        </cell>
        <cell>
          try
        </cell>
        <cell>
          while
        </cell>
        <cell>
          with
        </cell>
      </row>
      <row>
        <cell>
          yield
        </cell>
        <cell>
          True
        </cell>
        <cell>
          False
        </cell>
        <cell>
          None
        </cell>
        <cell>
        </cell>
        <cell>
        </cell>
      </row>
    </tabular>
  </table>
  <p>You might want to keep this list handy. If the interpreter complains about one
    of your variable names and you don't know why, see if it is on this list.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="question2_8_1">
    <statement>
      <p>True or False: the following is a legal variable name in Python: A_good_grade_is_A+</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
          <p>- The + character is not allowed in variable names.</p>
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
          <p>- The + character is not allowed in variable names (everything else in this name is
            fine).</p>
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
